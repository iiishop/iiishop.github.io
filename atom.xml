<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>iiishop&#39;s blog</title>
  
  
  <link href="http://iiishop.github.io/atom.xml" rel="self"/>
  
  <link href="http://iiishop.github.io/"/>
  <updated>2023-02-02T08:25:09.477Z</updated>
  <id>http://iiishop.github.io/</id>
  
  <author>
    <name>iiishop</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>置顶公告</title>
    <link href="http://iiishop.github.io/2025/09/30/%E7%BD%AE%E9%A1%B6%E5%85%AC%E5%91%8A/"/>
    <id>http://iiishop.github.io/2025/09/30/%E7%BD%AE%E9%A1%B6%E5%85%AC%E5%91%8A/</id>
    <published>2025-09-30T07:35:36.000Z</published>
    <updated>2023-02-02T08:25:09.477Z</updated>
    
    <content type="html"><![CDATA[]]></content>
    
    
      
      
    <summary type="html">
</summary>
      
    
    
    
    <category term="中文推文" scheme="http://iiishop.github.io/categories/%E4%B8%AD%E6%96%87%E6%8E%A8%E6%96%87/"/>
    
    <category term="公告" scheme="http://iiishop.github.io/categories/%E4%B8%AD%E6%96%87%E6%8E%A8%E6%96%87/%E5%85%AC%E5%91%8A/"/>
    
    
    <category term="公告" scheme="http://iiishop.github.io/tags/%E5%85%AC%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>ObjectPool</title>
    <link href="http://iiishop.github.io/2023/03/30/ObjectPool/"/>
    <id>http://iiishop.github.io/2023/03/30/ObjectPool/</id>
    <published>2023-03-30T12:00:40.000Z</published>
    <updated>2023-03-30T15:43:44.503Z</updated>
    
    <content type="html"><![CDATA[<h1 id="introduce">Introduce</h1><p>In our recent game production experience, we often faced the problemof excessive memory consumption.<br>For example, when pressed Shift kay, the player can get a high speed,and some shadow will appear in the path. If we instantiate and destorythe shadow object every time, the memory will be greatly wasted. So, weneed to use <code>ObjectPool</code> to deal with this situation.<br># Background<br>In this section, we will discuss what is <code>ObjectPool</code>, andwhy <code>ObjectPool</code> can solve this problem.</p><ul><li><h2 id="what-is-objectpool">What is <code>ObjectPool</code></h2><p>Interpret it literally, ObjectPool is a pool filled with objects.Then we can get or return the object from this pool.</p></li><li><h2 id="why-objectpool-can-solve-this-problem">Why<code>ObjectPool</code> can solve this problem</h2><p>The worest part of the <strong>Instantiate-Destory</strong> way is itapplied and used the memory for only a while before it was discarded.So, when we use the ObjectPool pattern, everything that only be used awhile will be created in the pool for preparation.</p><p>Now, we built and changed to use the ObjectPool pattern. The objectswe need to use are already created in the pool. When we need the object,we only need to get from the pool, then return into the pool.</p></li></ul><p>In the next section, I will show the structure of ObjectPool.</p><h1 id="structure">Structure</h1><ul><li>Design Pattern: <strong>Signleton</strong></li><li>Variables:<ol type="1"><li><strong><em>static</em></strong> ObjectPool<strong>Instance</strong></li><li>int <strong>Pool_Size</strong></li><li>List&lt;GameObject&gt; <strong>Prefabs</strong><strong><em>//Because I use the ObjectPool in Unity, you can use othertype.</em></strong></li><li>Dictionary&lt;string, Queue&lt;GameObject&gt;&gt;<strong>Available_Objects_Dictionary</strong></li></ol></li><li>Functions:<ol type="1"><li>void <strong>Awake</strong>()</li><li>void <strong>FillPool</strong>()</li><li>void <strong>ReturnPool</strong>(GameObject Prefab)</li><li>GameObject <strong>GetPool</strong>(GameObject Prefab)</li></ol></li></ul><h1 id="variables">Variables</h1><ul><li><h2 id="instance">Instance</h2>Instance is a instance of ObjectPool class, we will access this variablein other script to use the ObjectPool.</li><li><h2 id="pool_size">Pool_Size</h2>Pool_Size is the basic size of the ObjectPool, all objects will becreated in size copies in the pool at script awake.<br></li><li><h2 id="prefabs">Prefabs</h2>Prefabs can be added at the Unity Interface, and they will be created inthe pool.</li><li><h2 id="available_objects_dictionary">Available_Objects_Dictionary</h2>This variable is the most important part, it can allow we to invoke theObjectPool by the name of object. The value of the dictionary is aqueue, it is the main part of the ObjectPool or we can call this is thepool. Every object will be stored in this queue.</li></ul><h1 id="functions">Functions</h1><ul><li><h2 id="awake">Awake</h2><p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Instance <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> Instance <span class="token operator">!=</span> <span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">Destroy</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        Instance <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token function">FillPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><code>Awake</code> is the standard part of a Signleton class, it is usedto be sure the program only has one instance. When the instance is notthe first instance, it will kill the instance. And if it is, thisfunction will invoke <code>FillPool</code>.</p></li><li><h2 id="fillpool">FillPool</h2><p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">FillPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Pool_Size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> Prefab <span class="token keyword">in</span> Prefabs<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">ReturnPool</span><span class="token punctuation">(</span>Prefab<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><code>FillPool</code> will fill the pool by evey prefab in the Prefabs.It will invoke <code>ReturnPool</code> to do a standard process toreturn the object into the pool.</p></li><li><h2 id="returnpool">ReturnPool</h2><p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ReturnPool</span><span class="token punctuation">(</span><span class="token class-name">GameObject</span> Prefab<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name"><span class="token keyword">var</span></span> obj <span class="token operator">=</span> <span class="token function">instantiate</span><span class="token punctuation">(</span>Prefab<span class="token punctuation">,</span> transform<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    obj<span class="token punctuation">.</span><span class="token function">SetActive</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Available_Objects_Dictionary<span class="token punctuation">.</span><span class="token function">ContainsKey</span><span class="token punctuation">(</span>Prefab<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Available_Objects_Dictionary<span class="token punctuation">[</span>Prefab<span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Enqueue</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        Available_Objects_Dictionary<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>Prefab<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Queue<span class="token punctuation">&lt;</span>GameObject<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Available_Objects_Dictionary<span class="token punctuation">[</span>Prefab<span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Enqueue</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><code>ReturnPool</code> will put the object into the currect pool, ifthe pool does not exist, it will create one first.</p></li><li><h2 id="getpool">GetPool</h2><p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token return-type class-name">GameObject</span> <span class="token function">GetPool</span><span class="token punctuation">(</span><span class="token class-name">GameObject</span> Prefab<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Available_Objects_Dictionary<span class="token punctuation">[</span>Prefab<span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token punctuation">.</span>Count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">ReturnPool</span><span class="token punctuation">(</span>Prefab<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name"><span class="token keyword">var</span></span> obj <span class="token operator">=</span> Available_Objects_Dictionary<span class="token punctuation">[</span>Prefab<span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    obj<span class="token punctuation">.</span><span class="token function">SetActive</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> obj<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><code>GetPool</code> will be sure you can get a object from the pool.When there are no object in the pool, it will create one and return itinto the pool.</p></li></ul><h1 id="conclusion">Conclusion</h1><p>We have implement a ObjectPool in the steps above. The pool can storeand release the GameObject, and we can use this to save memory in thebullet script or other same function scropt. But this class also havesome inconvenience, that is we can only use it as a GameObject pool, ifwe want to store another type, we need to create another class ofobject. About how to solve it to make the ObjectPool generalization, itis your thinking homework. I may put the method in another post.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;introduce&quot;&gt;Introduce&lt;/h1&gt;
&lt;p&gt;In our recent game production experience, we often faced the problem
of excessive memory consumption.&lt;b</summary>
      
    
    
    
    <category term="EnglishBlog" scheme="http://iiishop.github.io/categories/EnglishBlog/"/>
    
    <category term="Design Pattern" scheme="http://iiishop.github.io/categories/EnglishBlog/Design-Pattern/"/>
    
    
    <category term="Unity" scheme="http://iiishop.github.io/tags/Unity/"/>
    
    <category term="Design Pattern" scheme="http://iiishop.github.io/tags/Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>心灵迷宫_框架</title>
    <link href="http://iiishop.github.io/2023/02/02/%E5%BF%83%E7%81%B5%E8%BF%B7%E5%AE%AB-%E6%A1%86%E6%9E%B6/"/>
    <id>http://iiishop.github.io/2023/02/02/%E5%BF%83%E7%81%B5%E8%BF%B7%E5%AE%AB-%E6%A1%86%E6%9E%B6/</id>
    <published>2023-02-02T08:12:54.000Z</published>
    <updated>2023-02-02T12:09:58.596Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言">引言</h1><p>此项目设计是基于项目组成员<strong>程禹</strong>的提议，外加我个人的思路衍生而形成。此篇文章将会介绍游戏涉及到的功能框架。</p><span id="more"></span><h1 id="框架">框架</h1><pre class="mermaid">flowchart TBsubgraph 0 [游离于场景之外的功能]    direction LR    存档---保存    存档---12    subgraph 01 [背包]        人物装备        主武器和副武器        04        02        011[后续有待添加]    end    subgraph 02 [各项属性]        血量        行走速度        攻击速度        021[后续有待添加]    end    subgraph 03 [特殊技能]        钩爪        时间停止        031[后续有待添加]    end    subgraph 04 [道具]        041(主动道具)        042(被动道具)    endend1[开始界面]subgraph 2 [教学关 //DEMO的终点]    direction LR    subgraph 21 [移动教学]        211([ad移动])---        212([space跳跃])    end    21==&gt;22    subgraph 22 [武器教学]        direction TB        221([左键向鼠标位置开火])---        222([右键特殊攻击 //远程武器一般为枪柄近战])    end    22==&gt;23    subgraph 23 [道具教学]        direction TB        231([道具的装备])---        232([滚轮切换主动道具])---        233([R使用主动道具])---        234([被动道具的装备 //以二段跳为例])---        235([使用二段跳通过常规无法通过的地形])        234-.-212    end    23==&gt;24    subgraph 24 [特殊技能教学]        direction TB        241([特殊技能的使用 //以钩爪为例])---        242([使用钩爪通过常规无法通过的地形])---        243([将钩爪用作为攻击手段 //拉近敌人])    endendsubgraph 3 [诊所所在的街道]    direction LR    4    5    6endsubgraph 4 [诊所]    direction LR    41([接取委托的办公桌])---    411[每次委托结束后会刷新出现四个新的委托]    41---412    subgraph 412 [委托检查机制]        当前玩家等级        玩家最近游玩类型频率        是否达到剧情触发条件    end    42([升级的场所])    43([更换武器装备以及道具的场所])endsubgraph 5 [购买武器和道具的场所]    购买武器    购买道具    subgraph 51[改装武器 //后续更新内容]        direction LR        枪管        瞄具        弹匣        枪托        511[其他配件 //例如镭射指示]        //后续也可考虑加入诸如流血/中毒等特殊效果    endendsubgraph 6 [购买装备和服装的场所]    61[购买装备]---装备大多拥有高防御与高属性加成但样式制式且无特殊效果    62[购买服装 //后续与特殊效果一同更新]---621[服装大多防御力低下且少有属性加成但样式随意切多有特殊效果 //看起来比较二次元]end1--&gt;11(新游戏)1--&gt;12(载入游戏)1--&gt;13(设置)1--&gt;退出11--&gt;2124==&gt;402-.-42人物装备-.-43主武器和副武器-.-4304-.-43</pre><h1 id="流程外的内容">流程外的内容</h1><ol type="1"><li><p>游戏整体的推进方式依照剧情而定，例如：</p><ol type="1"><li><code>等级推进</code>在玩家到达某指定等级后便会强制进入剧情</li><li><code>时间推进</code>游戏内时间是有一定流逝速度的，无论玩家在做什么时间都会经过。而到达了某一特定时间，玩家便会强制进入剧情</li><li><code>事件推进</code>这种方法比较传统，需要和其他的进行组合。例如完成了某个npc的任务后，走到另外某处地方便会发生事件而进入剧情；达到了一定等级，当经过某处地方便会发生事件而进入剧情……</li></ol><p>依照剧情的进行方式，对框架进行更改而产生相应效果。</p></li><li><p>框架仍然较为粗略，需要进行更加细致的描述，例如：</p><ol type="1"><li>补全目前能想到的所有<code>特殊技能</code></li><li>补全目前能想到的所有<code>武器右键效果</code></li><li>补全目前能想到的所有<code>特殊效果</code></li><li><code>近战类</code>武器在此框架中未被描述，需要斟酌后再进行制作</li></ol></li><li><p>因为内容的关系，网页上浏览字体较小，请搭配放大使用。</p></li><li><p>由于时间限制，此次对于框架的描述并未搭配相关图例提示，若有未解之处请及时反馈。</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;引言&quot;&gt;引言&lt;/h1&gt;
&lt;p&gt;此项目设计是基于项目组成员&lt;strong&gt;程禹&lt;/strong&gt;的提议，外加我个人的思路衍生而形成。此篇文章将会介绍游戏涉及到的功能框架。&lt;/p&gt;</summary>
    
    
    
    <category term="中文推文" scheme="http://iiishop.github.io/categories/%E4%B8%AD%E6%96%87%E6%8E%A8%E6%96%87/"/>
    
    <category term="游戏企划" scheme="http://iiishop.github.io/categories/%E4%B8%AD%E6%96%87%E6%8E%A8%E6%96%87/%E6%B8%B8%E6%88%8F%E4%BC%81%E5%88%92/"/>
    
    <category term="心灵迷宫" scheme="http://iiishop.github.io/categories/%E4%B8%AD%E6%96%87%E6%8E%A8%E6%96%87/%E6%B8%B8%E6%88%8F%E4%BC%81%E5%88%92/%E5%BF%83%E7%81%B5%E8%BF%B7%E5%AE%AB/"/>
    
    
    <category term="DearDeer" scheme="http://iiishop.github.io/tags/DearDeer/"/>
    
    <category term="心灵迷宫" scheme="http://iiishop.github.io/tags/%E5%BF%83%E7%81%B5%E8%BF%B7%E5%AE%AB/"/>
    
    <category term="框架" scheme="http://iiishop.github.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>KMP_algorithm</title>
    <link href="http://iiishop.github.io/2022/12/14/KMP-algorithm/"/>
    <id>http://iiishop.github.io/2022/12/14/KMP-algorithm/</id>
    <published>2022-12-14T15:53:49.000Z</published>
    <updated>2023-03-30T15:03:01.987Z</updated>
    
    <content type="html"><![CDATA[<h1 id="introduce">Introduce</h1><p><code>KMP</code> is a <em>String-matching</em> algorithm and one ofthe two <em>String-matching</em> algorithms I know.</p><p>The first is the <code>Brute-force algorithm (BF algorithm)</code>,and the <em>Time-complexity</em> is <strong><em>O(nm)</em></strong>.<em>'n'</em> is the length of the <strong>source String</strong>, and<em>'m'</em> is the length of the <strong>pattern String</strong>.</p><p>The second is <code>KMP</code>, and its <em>Time-complexity</em> is<strong><em>O(n)</em></strong>. Now, let's begin with why<code>KMP</code> was born.</p><span id="more"></span><h1 id="background">Background</h1><p>This section will discuss the <em>background</em> of <code>KMP</code>but not its <em>history</em>.</p><p>When we want to find the index of the <strong>pattern String</strong>in the <strong>source String</strong>, usually, we will check the<strong>source String</strong> one by one to find the start character ofthe <strong>pattern String</strong>, then check if the rest matches the<strong>pattern String</strong>. If it matches, returns the index. Ifnot, then return from the start.</p><p>We can see this function is a time waste, especially in the length ofthe <strong>pattern String</strong> is a large number. Because afterevery failure, the work of matching pattern String will be restarted.So, <code>KMP</code> uses a way to avoid this condition.</p><p>Now, I will use a simple example to show you how KMP works.</p><p>the <strong>source String</strong> is <code>"aaaaab"</code> and the<strong>pattern String</strong> is <code>"aaab"</code></p><p>So the <em>Next array</em> is <code>"0120"</code></p><p>We can easily know it will do <strong><em>6 loops</em></strong> butnot <strong><em>6 processes</em></strong>.</p><ol type="1"><li><table><thead><tr class="header"><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th></tr></thead><tbody><tr class="odd"><td>i</td><td></td><td></td><td></td><td></td><td></td></tr><tr class="even"><td>a</td><td>a</td><td>a</td><td>a</td><td>a</td><td>b</td></tr><tr class="odd"><td>a</td><td>a</td><td>a</td><td>b</td><td></td><td></td></tr></tbody></table><p><code>a == a</code></p></li><li><table><thead><tr class="header"><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th></tr></thead><tbody><tr class="odd"><td></td><td>i</td><td></td><td></td><td></td><td></td></tr><tr class="even"><td>a</td><td>a</td><td>a</td><td>a</td><td>a</td><td>b</td></tr><tr class="odd"><td>a</td><td>a</td><td>a</td><td>b</td><td></td><td></td></tr></tbody></table><p><code>a == a</code></p></li><li><table><thead><tr class="header"><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th></tr></thead><tbody><tr class="odd"><td></td><td></td><td>i</td><td></td><td></td><td></td></tr><tr class="even"><td>a</td><td>a</td><td>a</td><td>a</td><td>a</td><td>b</td></tr><tr class="odd"><td>a</td><td>a</td><td>a</td><td>b</td><td></td><td></td></tr></tbody></table><p><code>a == a</code></p></li><li><table><thead><tr class="header"><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th></tr></thead><tbody><tr class="odd"><td></td><td></td><td></td><td>i</td><td></td><td></td></tr><tr class="even"><td>a</td><td>a</td><td>a</td><td>a</td><td>a</td><td>b</td></tr><tr class="odd"><td>a</td><td>a</td><td>a</td><td>b</td><td></td><td></td></tr></tbody></table><p><code>a != b</code><br>So, this matching failed. Because of Next[2] = 2, the next processis:</p></li><li><table><thead><tr class="header"><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th></tr></thead><tbody><tr class="odd"><td></td><td></td><td></td><td>i</td><td></td><td></td></tr><tr class="even"><td>a</td><td>a</td><td>a</td><td>a</td><td>a</td><td>b</td></tr><tr class="odd"><td></td><td>a</td><td>a</td><td>a</td><td>b</td><td></td></tr></tbody></table><p><code>a == a</code></p></li><li><table><thead><tr class="header"><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th></tr></thead><tbody><tr class="odd"><td></td><td></td><td></td><td></td><td>i</td><td></td></tr><tr class="even"><td>a</td><td>a</td><td>a</td><td>a</td><td>a</td><td>b</td></tr><tr class="odd"><td></td><td>a</td><td>a</td><td>a</td><td>b</td><td></td></tr></tbody></table><p><code>a != b</code></p></li><li><table><thead><tr class="header"><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th></tr></thead><tbody><tr class="odd"><td></td><td></td><td></td><td></td><td>i</td><td></td></tr><tr class="even"><td>a</td><td>a</td><td>a</td><td>a</td><td>a</td><td>b</td></tr><tr class="odd"><td></td><td></td><td>a</td><td>a</td><td>a</td><td>b</td></tr></tbody></table><p><code>a == a</code></p></li><li><table><thead><tr class="header"><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th></tr></thead><tbody><tr class="odd"><td></td><td></td><td></td><td></td><td></td><td>i</td></tr><tr class="even"><td>a</td><td>a</td><td>a</td><td>a</td><td>a</td><td>b</td></tr><tr class="odd"><td></td><td></td><td>a</td><td>a</td><td>a</td><td>b</td></tr></tbody></table><p><code>b == b</code>, i is in the last place of the <strong>sourceString</strong> and 'b' is also the last character of the<strong>pattern String</strong>.</p></li></ol><p>So, the matching is complete, the index is 2.</p><h1 id="next-array">Next Array</h1><p>The most important part of <code>KMP</code> is the <em>Nextarray</em>.</p><p>The <em>Next array</em> shows how many elements can be<strong><em>skipped</em></strong> if the last matching fails in thisplace.</p><p>An example of the <em>Next array</em>:</p><table><thead><tr class="header"><th>A</th><th>B</th><th>A</th><th>C</th><th>A</th><th>B</th><th>A</th><th>B</th></tr></thead><tbody><tr class="odd"><td>0</td><td>0</td><td>1</td><td>0</td><td>1</td><td>2</td><td>3</td><td>2</td></tr></tbody></table><p>From this table, we can see the pattern String is<code>"ABACABAB"</code> and the <em>Next array</em> is<code>"00101232"</code>, now I will show the code to tell how togenerate the <em>Next array</em>.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token class-name">GetNext</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token class-name">Pattern</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> <span class="token class-name">Pattern_Length</span> <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token class-name">Next</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">Pattern_Length</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">Next</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token class-name">Pattern_Length</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>j <span class="token operator">=</span> <span class="token class-name">Next</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>j<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">Next</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token class-name">Next</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Let's simulate this process using "ABACABAB".</p><pre><code>Pattern_Lengh = 8</code></pre><p>So, it will do 7 loops.</p><ol type="1"><li><p>i = 1, j = 0<br><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Pattern</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'B'</span><span class="token punctuation">,</span> <span class="token class-name">Pattern</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'A'</span><span class="token class-name">Next</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p></li><li><p>i = 2, j = 0<br><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Pattern</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'A'</span><span class="token punctuation">,</span> <span class="token class-name">Pattern</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'A'</span>j<span class="token operator">++</span><span class="token class-name">Next</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p></li><li><p>i = 3, j = 1<br><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Pattern</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'C'</span><span class="token punctuation">,</span> <span class="token class-name">Pattern</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'B'</span>j <span class="token operator">=</span> <span class="token class-name">Next</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token class-name">Pattern</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'A'</span><span class="token class-name">Next</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></p></li><li><p>i = 4, j = 0<br><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Pattern</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'A'</span><span class="token punctuation">,</span> <span class="token class-name">Pattern</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'A'</span>j<span class="token operator">++</span><span class="token class-name">Next</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p></li><li><p>i = 5, j = 1<br><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Pattern</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'B'</span><span class="token punctuation">,</span> <span class="token class-name">Pattern</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'B'</span>j<span class="token operator">++</span><span class="token class-name">Next</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p></li><li><p>i = 6, j = 2<br><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Pattern</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'A'</span><span class="token punctuation">,</span> <span class="token class-name">Pattern</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'A'</span>j<span class="token operator">++</span><span class="token class-name">Next</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p></li><li><p>i = 7, j = 3<br><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Pattern</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'B'</span><span class="token punctuation">,</span> <span class="token class-name">Pattern</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'C'</span>j <span class="token operator">=</span> <span class="token class-name">Next</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token class-name">Pattern</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'B'</span>j<span class="token operator">++</span><span class="token class-name">Next</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></li></ol><p>In every loop, the code will generate a Next number. Now I will tellyou why it can.</p><p>In this code, we can easily know <code>j</code> is a pointer to theprefix. When the current part of the string and the prefix are the same,<code>j</code> will self-increasing to point to the next character. Butwhen the current character is not as same as the<code>Pattern[j]</code>, <code>j</code> will return to the skippedcharacter pointed to by the previous character, let's see it by anexample.</p><p><code>i = 7, j = 3</code></p><table><thead><tr class="header"><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th></tr></thead><tbody><tr class="odd"><td></td><td></td><td></td><td>j</td><td></td><td></td><td></td><td></td></tr><tr class="even"><td>A</td><td>B</td><td>A</td><td>C</td><td>A</td><td>B</td><td>A</td><td>B</td></tr><tr class="odd"><td>0</td><td>0</td><td>1</td><td>0</td><td>1</td><td>2</td><td>3</td><td>x</td></tr></tbody></table><p>Because <code>Pattern[i] != Pattern[j] and j &gt; 0</code>, so, weneed to find the skip number from the last character in the prefix.</p><p><code>j = Next[j - 1] = Next[2] = 1</code></p><table><thead><tr class="header"><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th></tr></thead><tbody><tr class="odd"><td></td><td>j</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr class="even"><td>A</td><td>B</td><td>A</td><td>C</td><td>A</td><td>B</td><td>A</td><td>B</td></tr><tr class="odd"><td>0</td><td>0</td><td>1</td><td>0</td><td>1</td><td>2</td><td>3</td><td>x</td></tr></tbody></table><p>It is because we treat the <code>Pattern[i - 1] and Puttern[i]</code>as a whole, and <code>Pattern[i - 1]</code> corresponds to <strong>thethird character</strong> in the prefix, then we see <strong>the thirdcharacter</strong> in the prefix to be the current character, so, itcorresponds to <strong>the first character</strong> in the prefix, thus,we need to check if <strong>the second character</strong> in the prefixmatching <code>Pattern[i]</code>.</p><p>Because of <code>Pattern[1] == Pattern[i]</code> thus, <em>j++</em>,it means we can skip 2 characters if the last matching failed in thenext place (although it is unlikely to be achieved).</p><p>Now, we found out how to generate the <em>Next array</em>, the next,I will show you how to use the <em>Next array</em> in the<em>String-matching</em> algorithm</p><h1 id="kmp">KMP</h1><p>I will show the code first.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">KMP</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token class-name">Source</span><span class="token punctuation">,</span> <span class="token class-name">String</span> <span class="token class-name">Pattern</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token class-name">Next</span> <span class="token operator">=</span> <span class="token class-name">GetNext</span><span class="token punctuation">(</span><span class="token class-name">Pattern</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">Source</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token class-name">Source</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>j <span class="token operator">=</span> next<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">Source</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>j<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> i <span class="token operator">-</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>We can see some of this code is as same as the code in the function<code>GetNext</code> and it also does the same thing. So, we can see the<code>GetNext</code> function is a process to match strings within the<strong>pattern String</strong>.</p><p>Skip them, the last part <code>j == Pattern_Length</code> means jpoints over the <strong>pattern String</strong>, so the matching iscomplete.</p><h1 id="conclusion">Conclusion</h1><p>The <code>KMP</code> algorithm reduced the <em>Time-complexity</em>of the <code>B_F String-matching algorithm</code>. The most importantpart of <code>KMP</code> is solving the <strong>Next array</strong>,this step is an expression of <strong><em>recursivethinking</em></strong>, we need to appreciate this idea and use it toimprove efficiency when thinking of algorithms to solve otherproblems.</p><h1 id="whole-code">Whole Code</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">KMP</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token class-name">Source</span><span class="token punctuation">,</span> <span class="token class-name">String</span> <span class="token class-name">Pattern</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> <span class="token class-name">Pattern_Length</span> <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token class-name">Next</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">Pattern_Length</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">Next</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token class-name">Pattern_Length</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>j <span class="token operator">=</span> <span class="token class-name">Next</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>j<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">Next</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">Source</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token class-name">Source</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>j <span class="token operator">=</span> next<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">Source</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>j<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token class-name">Pattern_Length</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> i <span class="token operator">-</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;introduce&quot;&gt;Introduce&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;KMP&lt;/code&gt; is a &lt;em&gt;String-matching&lt;/em&gt; algorithm and one of
the two &lt;em&gt;String-matching&lt;/em&gt; algorithms I know.&lt;/p&gt;
&lt;p&gt;The first is the &lt;code&gt;Brute-force algorithm (BF algorithm)&lt;/code&gt;,
and the &lt;em&gt;Time-complexity&lt;/em&gt; is &lt;strong&gt;&lt;em&gt;O(nm)&lt;/em&gt;&lt;/strong&gt;.
&lt;em&gt;&#39;n&#39;&lt;/em&gt; is the length of the &lt;strong&gt;source String&lt;/strong&gt;, and
&lt;em&gt;&#39;m&#39;&lt;/em&gt; is the length of the &lt;strong&gt;pattern String&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The second is &lt;code&gt;KMP&lt;/code&gt;, and its &lt;em&gt;Time-complexity&lt;/em&gt; is
&lt;strong&gt;&lt;em&gt;O(n)&lt;/em&gt;&lt;/strong&gt;. Now, let&#39;s begin with why
&lt;code&gt;KMP&lt;/code&gt; was born.&lt;/p&gt;</summary>
    
    
    
    <category term="EnglishBlog" scheme="http://iiishop.github.io/categories/EnglishBlog/"/>
    
    <category term="Algorithm" scheme="http://iiishop.github.io/categories/EnglishBlog/Algorithm/"/>
    
    
    <category term="Algorithm" scheme="http://iiishop.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>关于主线的想法</title>
    <link href="http://iiishop.github.io/2022/10/24/%E5%85%B3%E4%BA%8E%E4%B8%BB%E7%BA%BF%E7%9A%84%E6%83%B3%E6%B3%95/"/>
    <id>http://iiishop.github.io/2022/10/24/%E5%85%B3%E4%BA%8E%E4%B8%BB%E7%BA%BF%E7%9A%84%E6%83%B3%E6%B3%95/</id>
    <published>2022-10-24T07:37:39.000Z</published>
    <updated>2022-11-19T10:37:29.380Z</updated>
    
    <content type="html"><![CDATA[<h1 id="游戏的形式">游戏的形式</h1><ul><li><p>分为<code>回忆</code>和<code>现实</code>两个部分。<code>回忆</code>使用3d场景来表现，<code>现实</code>使用2d伪3d来表现。</p></li><li><p>主角骑着单车在城市中游历，遇到<code>回忆事件</code>后进入<code>回忆场景</code>，在游历中亦可与城市互动。</p></li></ul><span id="more"></span><ul><li><h2 id="时间系统">时间系统:</h2><ol type="1"><li><p>根据真实时间来映射游戏时间。现实一小时映射游戏三小时（游戏内从晚上九点到早上六点，控制实际时常在三小时左右）。随着时间的流逝，游戏中的<code>现实世界</code>也会跟着变化，一些事件的触发点也会跟着时间的变化而消失或产生。错过的事件不会在后续内容中再次发生。</p><p><code>目的</code>是希望游戏中的<code>现实</code>和<code>回忆</code>丰富程度相当，错过的<code>回忆内容</code>利用<code>现实内容</code>而填充。</p></li><li><p>根据游戏进度而进行时间的变化。当某些事件发生后，游戏的时间产生了推进。事件的发生时间会有重叠，从而达到分支和选择的目的，促进多周目游玩的需要。</p></li></ol></li></ul><h1 id="关于单车">关于单车</h1><ul><li><p>在我看来，<code>传统单车</code>有别于共享单车、公路车等年轻产物，是和现在的节奏是格格不入的。</p></li><li><p>现代诸事首要讲究的都是<code>效率</code>，而在吱呀声中缓缓驶来的<code>老单车</code>，则显得和效率二字毫无关联。现在的老单车，大多也只存在于老人的座下，在菜场和公园来回<code>转悠</code>。</p></li><li><p>因而，我认为，单车可以成为过去时代的一个代表，也是慢生活的一个<code>象征</code>。它可以起到一个<code>桥梁</code>的作用，链接现世与过去，从而被选中成为游戏的<code>线索物件</code>。</p></li><li><p>在游戏中，单车也类似一个<code>引路人</code>的存在，引导着主人公一点点找回过往的<code>碎片</code>，从而在心境上回到那最<code>原初的点</code>。</p></li><li><p>故事的<code>起因</code>是单车，故事的<code>经过</code>由单车的变化来表现，而故事的<code>结尾</code>也是与单车的挥别，从而迈向一个<code>新的起点</code>。</p></li></ul><h1 id="十年前的时代">十年前的时代</h1><ul><li><p>游戏中十年前的时代是一个存在于<code>虚构中的时代</code>。它是一个<code>感觉的集合体</code>。</p></li><li><p>十年前的主角还是年幼，那时候的他对于世界的认知也是做不到全面。那么以当时主人公那<code>稚嫩的视角</code>来观察与感受的世界，就是所谓十年前的时代。</p></li><li><p>或许是真的，也或许只是因为那时的主人公无牵无挂无欲无求，从而认为世界不需要快。他拥有充足的时间来细细体悟世界的每一处细节，因此产生了慢生活的感觉。</p></li><li><p>说点个人的。在我的眼中，那个时代是还被杀马特、火星文占据着主流文化的，手机等科技产品是包含<code>蓬勃生命力</code>的，流行音乐是被周杰伦、许嵩、徐良等占据着的，是个<code>有梦就可以去追</code>的时代；那时的群众还是<code>朴实</code>的，也没有那么多牛鬼蛇神充斥在生活中，归结起来是个<code>浪漫</code>的时代。当然这些看法非常的主观，出现这些想法可能真的是十年前的体悟，也可能只是现在对于过去的美好向往而强加产生的。总之我希望那个时代会成为一个<code>精神寄托</code>，成为一个<code>理想乡</code>一般的存在。在感到人生无望的时候，能有一些老物件、过往记录，来传递当时<code>对未来的寄托</code>以及提供一个<code>美好的幻想</code>留存于心中。</p></li><li><p>由此，在故事中这个时代是<code>饱含着希望与美好的</code>，是<code>浪漫而令人向往的</code>一个时代。主人公在回忆的最后，寻回了这份精神，从而一改从前，坚定了对<code>梦想</code>的追寻。</p></li></ul><h1 id="感觉的传递">感觉的传递</h1><ul><li><p>就我这些年对于游戏的研究来看，我认为游戏的本质是一个<code>感觉的媒介</code>。</p></li><li><p>这里的感觉是广义的。感觉可以是如喜怒哀乐之类的已经被定义的，叫的出名字的情感；也可以是伴随着事件的发生而产生，习以为常但又无法道出的感受；也会是那些在脑中飘忽着，忽然在某一时刻触动了心神的思绪。</p></li><li><p>在日常生活中，通过五感接收而来的体验最终化为感觉而导向脑中，形成回忆。因而，也可以说回忆是感觉的集合体。回忆也是由一些客观的体验加上主观的思考而构成的，因此，回忆不一定是真正的过去。</p></li><li><p>而越远的回忆越为飘渺，十年前的回忆，作为客观存在的，充满细节的那一部分大多已经烟消云散了，留下的多为是主观的感觉。故我想在这里，找寻一个拥有共性的感觉，来让这一代人认同他就是那个时代的一个代表。</p></li><li><p>说回游戏，游戏作为当前媒介的集大成者，包含着视听演绎，也提供了主动。在一款好的游戏作品中，设定出现的感觉却会让玩家产生是自己的经验总结而形成的，游戏在每一个细节中，潜移默化地将制作人所希望的感觉传递给了玩家，只要这是一个良性的感觉，那么作品自然不会不佳。</p></li><li><p>也因此，一名优秀的游戏制作人，能够很自然的在游戏的各处，添加他所体悟的感觉。换句话说，当制作人在游戏的这一处产生了这样的感觉，那么玩家同样也会产生。</p></li><li><p>当游戏结束后，尤其是在结束后许久，曾经作为游戏的体验就被剥离开来，留下的只剩在游戏中产生的感觉。</p></li></ul><pre class="line-numbers language-none"><code class="language-none">结合上面所说的，在我的脑中一直萦绕着一个感觉，它同时伴生着一个场景——一个朦胧的昏黄的画面，可能是午后，也可能是黄昏，一条空旷的大街，一家老旧的体育馆，门口站着几个看不清脸的学生，几栋瓷砖贴外墙，金属外框防盗窗的居民楼，和几栋淡彩色外墙，深蓝色反光窗户的说不清功能的楼房。我无法描述出具体的感觉，但能大致讲述出产生这种感觉的一些客观物件。可惜我对这些物件的了解研究也不是很精确，可能无法让这种感觉同样出现在他人的脑中。在这里说出大概也只是为了排解下我多年的困扰。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="主线的内容">主线的内容</h1><p>曾经在脑中浮现出的一些场景和内容，<code>仅供参考</code>。</p><ol type="1"><li><p>主人公在开始是一个麻木的社畜，每日重复着单调而统一的生活。他并未感觉此有什么不妥，也不想改变什么，认为日复一日的劳碌就是他此生的命了。</p></li><li><p>时间推进到深夜，主人公听到空竹筒清脆的敲击声——是一位推着车卖馄饨的老阿姨。而她也是主人公记忆中小时候就已经在卖馄饨，通过交谈，主人公好似领悟了什么。</p></li><li><p>主人公驱车前往海边时，同时也是黎明前最后的黑暗。经过前景的一个电线杆遮挡切换，朝阳在背景升起。镜头拉远，一群海鸥飞过。主人公来到了海边的悬崖上，看着巨浪拍击峭壁，心中汹涌澎湃。因为主人公的一夜未归而有人来寻他（父母、女友或者室友），当听到那人的喊声，主人公回头，自行车从被回忆勾画的形象变回老旧的形象，随后散架······</p></li></ol><pre class="line-numbers language-none"><code class="language-none">对主线的内容我目前还是到不清说不明，是有一种朦胧的感觉指引着我去完成这部作品。希望能在制作过程中逐渐探寻这感觉来由何处，或许也能完成我人生的蜕变。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;游戏的形式&quot;&gt;游戏的形式&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;分为&lt;code&gt;回忆&lt;/code&gt;和&lt;code&gt;现实&lt;/code&gt;两个部分。&lt;code&gt;回忆&lt;/code&gt;使用3d场景来表现，&lt;code&gt;现实&lt;/code&gt;使用2d伪3d来表现。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;主角骑着单车在城市中游历，遇到&lt;code&gt;回忆事件&lt;/code&gt;后进入&lt;code&gt;回忆场景&lt;/code&gt;，在游历中亦可与城市互动。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="中文推文" scheme="http://iiishop.github.io/categories/%E4%B8%AD%E6%96%87%E6%8E%A8%E6%96%87/"/>
    
    <category term="游戏企划" scheme="http://iiishop.github.io/categories/%E4%B8%AD%E6%96%87%E6%8E%A8%E6%96%87/%E6%B8%B8%E6%88%8F%E4%BC%81%E5%88%92/"/>
    
    <category term="单车" scheme="http://iiishop.github.io/categories/%E4%B8%AD%E6%96%87%E6%8E%A8%E6%96%87/%E6%B8%B8%E6%88%8F%E4%BC%81%E5%88%92/%E5%8D%95%E8%BD%A6/"/>
    
    
    <category term="DearDeer" scheme="http://iiishop.github.io/tags/DearDeer/"/>
    
    <category term="单车" scheme="http://iiishop.github.io/tags/%E5%8D%95%E8%BD%A6/"/>
    
  </entry>
  
  <entry>
    <title>游戏设计中的团队合作</title>
    <link href="http://iiishop.github.io/2022/10/06/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1%E4%B8%AD%E7%9A%84%E5%9B%A2%E9%98%9F%E5%90%88%E4%BD%9C/"/>
    <id>http://iiishop.github.io/2022/10/06/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1%E4%B8%AD%E7%9A%84%E5%9B%A2%E9%98%9F%E5%90%88%E4%BD%9C/</id>
    <published>2022-10-06T05:15:57.000Z</published>
    <updated>2022-10-08T03:39:04.790Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>此篇推文是关于<code>游戏设计艺术</code>一书中有关团队合作内容的整理笔记。</p><p>在高中时期，我曾花费一年粗略地翻阅了此书。现今，我会重新整理此前在此书中记录的零散笔记，并总结成推文发布。</p><h1 id="团队合作的必要性">团队合作的必要性</h1><p>现代的电子游戏，涉及到的方面越来越多，游戏设计师很难再单凭靠一腔热情完成一款成功的游戏作品，这时候，团队和团队合作的意义就出现了。</p><span id="more"></span><h1 id="成功团队的秘诀">成功团队的秘诀</h1><p>要成就一个成功的团队，最核心也是最严肃的一个关键点是<code>爱</code></p><p>当然这并不是说只要整个团队表现的一派和谐、其乐融融就能做成一款好的游戏(虽然这也没有坏处)。</p><p>这里说的爱，是团队成员需要对他们的作品拥有爱。<code>当团队中的每个人都对他们共同制作的游戏以及该游戏面向的玩家群体有很深的、很真切的爱，那么所有的不同与争论都会被搁置在一边。</code>因为他们想让正在设计制作的游戏变成现实，想让它尽可能完美地呈现在玩家面前。</p><p>类似的，<code>爱不足</code>会干扰团队，甚至影响他人，让游戏制作难以继续甚至停滞而散开。</p><h2 id="关于爱不足主要有下面三个主要问题">关于<code>爱不足</code>主要有下面三个主要问题</h2><ol type="1"><li><h3 id="团队成员不喜欢任何游戏">团队成员不喜欢任何游戏</h3><p>这对一个现在正充满热情扑向游戏设计制作的开发者来说可能很难理解，但这类人是确切存在的，或许是随波逐流，或许是利益导向，他们进入了游戏行业。但如果队伍中存在这样的成员，整个团队就像背上了重担，难行寸步。他们不会做出什么贡献，而把大部分时间精力浪费在与那些真正热爱游戏的成员的争论上，甚至连带影响那些成员也丧失热情。</p><p>应对这样的成员只有一种方法：<strong><em>请他们离开团队</em></strong></p></li><li><h3 id="团队成员比起当前设计的游戏更喜欢另一种设计模式的游戏">团队成员比起当前设计的游戏，更喜欢另一种设计模式的游戏</h3><p>这个问题在游戏团队中很是常见，比如：一名喜欢fps游戏的关卡策划，被迫去参与rpg游戏的开发；一名对画面有独到见解的技术美术，被迫去开发一款传奇类页游。这样的反差通常会让那些原有稳定的<code>爽点</code>的游戏开发者难以在新项目中找回那种感觉，从而消极怠工，难以展现出原有的技术和水平。</p><p>那么应对这样的成员，通常是需要主动沟通，引导他们去发现正在开发的游戏中吸引他们的部分，或者了解如何在当前正在开发的游戏中加入那些让他们感到舒适的新特性和新元素的想法。这些引导的最终结果，是让这款项目在那些成员眼中，从原先的痛恨厌恶，想划水而快速结束<code>变成</code>一款令他们热爱而活跃参与的项目。这不是一件简单的事情，团队管理者通常需要深入了解哪些部分能令这些开发者感到畅快而想要参与，并且在一次次沟通中潜移默化地将这种可能性表现出来，从而让成员的心态得到改变。</p><p>这里书中作者展现了这样一个例子</p><p><code>在作者曾参与开发的一款海盗游戏中，动画师们原先为那些激动人心的海盗角色设计了丰富的动作和面部动画，但随着设计的推进，他们发现游戏的主体是船，而那些海盗角色通常被置于离玩家很远的地方，那么任何细节的动画设计都是没有意义的。当动画师们意识到了这点，很明显地就失去了对项目的爱。而在后来的一次团队会议中，一位动画师带来了一些手稿，并表示：当意识到那些船才是明星时，他在思考如何才能让它们看起来很酷。于是，在那些手稿中出现了诸如：船如何被炸成碎片；桅杆如何断裂，并沉入大海；在船帆遭遇加农炮弹冲击时如何被撕裂···这些手稿给其他的动画师带来了启发和鼓舞，他们开始重新找回对项目的热爱，继续了项目的进行。</code></p><p>这里项目可以说是被这位动画师用这些手稿从失败的边缘抢救了回来，通过这些手稿的引导和启发，让那些动画师重新找到了热爱的点，并继续参与了制作。</p></li><li><h3 id="团队成员喜欢同一个游戏的不同版本">团队成员喜欢同一个游戏的不同版本</h3><p>这是在团队中最常见，最有普遍性的一个问题。这个时候，团队中每个成员都对当前开发的游戏非常热爱，但每个成员对这款游戏最终的导向都有着截然不同的看法，那么这种看法的不同势必会导致团队的分歧。</p><p>避免这种分歧的关键是：尽早让所有人都明确知道游戏的设计。</p><p>在游戏制作过程中难免会遇到争论和分歧，但如果每个人都能抱着同一个目标去讨论它，并且对他人的看法保持尊重，团队就能得到最终的结果。</p><p>一旦制作人在会议中感觉到有人不是真心同意某一想法，就必须停下工作，找寻让他们满意并继续合作的方法。否则他们就会慢慢失去对这个项目的热情，而失去对项目做有价值贡献的能力。<br>没有什么决定是<strong>最终决定</strong>，除非整个团队都同意它是<strong>最终决定</strong>。</p></li></ol><h2 id="实在无法感受对当前项目的热爱">实在无法感受对当前项目的热爱。</h2><p>若是实在无法对当前正在制作的游戏提起兴趣，那么你除了保持寻找能唤起热情的那个兴趣点，剩下的就只有——不把这款游戏看作为自己而制作的游戏，而把它看作为它所目标的玩家而设计的游戏。想象着曾经为所爱之人送出礼物时，看着他们见到礼物那一瞬间的兴奋，对于这一瞬间的期盼，可以使你焕发热情而去更加精心地寻找和准备礼物。这时候<code>爱</code>的目标点就转向了玩家身上。因为你爱着他们，所以当想象他们看到这款游戏的兴奋时，你自然就会焕发出激情，从而投入对游戏的制作中去。</p><p>可若是连受众的兴奋也不能成为你<code>爱</code>的理由时，那么就只有最后一个方法了——假装，假装你有大量的热情去对待你的游戏和受众。尽管这看起来像是在自欺欺人，但通常很有效果。并且在假装爱着的时候，真正的爱也会慢慢地涌现出来。</p><p><code>也许是一次春季大扫除，每个人都是很不情愿，想要敷衍了事。然而当其中一个人半开玩笑地说：“动起来，大伙，这肯定会很有意思。”每个人在听完这句讽刺的话后都轻笑出来了，随后装出一副“这肯定会很有意思”的态度开始干活。虽然一开始只是假装，但是没过多久，所有人就会觉得大扫除有意思起来。</code></p><p>如果不知道怎么去热爱一样东西，只需要问你自己那些真正热爱游戏的人会怎么做，然后开始做那些事情，你会吃惊的发现在你体内所发生的种种变化。</p><p>最后，<code>爱</code>是决定团队是否成功的最关键的因素，这是真心实意的。<code>爱</code>在团队中不是一件奢侈品，而是一件必需品——如果你希望制作出一款伟大的游戏的话。</p><h1 id="共同设计">共同设计</h1><p>当团队中每个人都<code>爱</code>这个项目时，那很棒，但同时，每个人都会想表达出自己的想法，把自己的设计呈现在游戏中。对于一些设计师来说，这很可怕，这破事他们不得不与其他人争论什么才是“正确”的游戏设计。这些设计师往往会不理于团队，无视其他人的意见，然后设计出一套完全独立于其他成员的设计。结果显而易见，其他组员的<code>爱</code>将会消失，而作品也将会失败。</p><p>一个更容易成功的方法是尽可能地多让团队成员参与到设计过程中去。把身为设计师的自尊放一边，很快你就会发现团队中大部分建议并不坏，他们也希望游戏能够变得更加优秀。</p><p>当所有人都参与到设计过程汇总，并每一个主意和建议都被认真听取时，那么将会得到</p><ul><li>有更多想法的选择空间</li><li>快速排除有缺陷的想法</li><li>被迫地全方位看待整体设计</li><li>让团队中每个成员都感到他们拥有游戏的设计</li></ul><p>当整个团队都参与到了设计之中，那么游戏会变得更加有力，每个人在完成自己的任务时也会更加有信心，一位他们理解游戏的设计。这点非常重要，因为他们能感知到不是所有的设计都是事先确定好的。</p><p>在游戏的制作过程中，无数的小决策一直在进行中——他们不是由设计师决定，而是由程序员、艺术家、执行官做出的。当每个人都对游戏设计有了完整的理解，这些小决策就会非常顺利地进行下去，并且增强整体的游戏设计，这使得整个项目拥有一种统一的紧密感和健全感。那么团队中的所有成员都会感觉到他们的贡献是游戏中最重要的部分——这是一种健康的情况。这意味着团队的成员都会感受到他们对于游戏的<strong>所有权</strong>和<strong>责任</strong></p><h1 id="团队交流">团队交流</h1><h1 id="关于游戏设计文档">关于游戏设计文档</h1><h1 id="附录">附录</h1><ul><li><h2 id="透镜">透镜</h2></li><li><h2 id="拓展阅读">拓展阅读</h2></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;
&lt;p&gt;此篇推文是关于&lt;code&gt;游戏设计艺术&lt;/code&gt;一书中有关团队合作内容的整理笔记。&lt;/p&gt;
&lt;p&gt;在高中时期，我曾花费一年粗略地翻阅了此书。现今，我会重新整理此前在此书中记录的零散笔记，并总结成推文发布。&lt;/p&gt;
&lt;h1 id=&quot;团队合作的必要性&quot;&gt;团队合作的必要性&lt;/h1&gt;
&lt;p&gt;现代的电子游戏，涉及到的方面越来越多，游戏设计师很难再单凭靠一腔热情完成一款成功的游戏作品，这时候，团队和团队合作的意义就出现了。&lt;/p&gt;</summary>
    
    
    
    <category term="中文推文" scheme="http://iiishop.github.io/categories/%E4%B8%AD%E6%96%87%E6%8E%A8%E6%96%87/"/>
    
    <category term="学习" scheme="http://iiishop.github.io/categories/%E4%B8%AD%E6%96%87%E6%8E%A8%E6%96%87/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="游戏设计" scheme="http://iiishop.github.io/categories/%E4%B8%AD%E6%96%87%E6%8E%A8%E6%96%87/%E5%AD%A6%E4%B9%A0/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="笔记" scheme="http://iiishop.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="游戏设计艺术" scheme="http://iiishop.github.io/tags/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1%E8%89%BA%E6%9C%AF/"/>
    
    <category term="团队合作" scheme="http://iiishop.github.io/tags/%E5%9B%A2%E9%98%9F%E5%90%88%E4%BD%9C/"/>
    
    <category term="游戏设计" scheme="http://iiishop.github.io/tags/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>游戏设计元素</title>
    <link href="http://iiishop.github.io/2022/10/06/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1%E5%85%83%E7%B4%A0/"/>
    <id>http://iiishop.github.io/2022/10/06/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1%E5%85%83%E7%B4%A0/</id>
    <published>2022-10-05T23:33:43.000Z</published>
    <updated>2022-10-08T01:53:48.277Z</updated>
    
    <content type="html"><![CDATA[<pre class="mermaid">flowchart TBA{体验}---B{玩家}A---兴趣曲线A---间接控制A---场景A---a[世界]a---故事a---美学a---空间a---角色B---玩家的脑---动机B---d((界面))---C{游戏}B---改变B---试玩---C试玩---DB---其他玩家---社群---BC---元素C---主题C---技术C---机制---谜题机制---平衡C---D{流程}---E{设计师}D---创意D---迭代E---团队---文档E---责任E---目标E---推销---客户---盈利E---客户E---盈利click 团队 "https://iiishop.github.io/2022/10/06/游戏设计中的团队合作/" _blankclick 文档 "https://iiishop.github.io/2022/10/06/游戏设计中的团队合作/#关于游戏设计文档" _blank</pre><h1 id="可以通过点击进入相关推文页面">可以通过<code>点击</code>进入相关推文页面</h1><h1 id="游戏设计是一项涉及范围非常广的事务后面会不定期对每个涉及到的环节单独阐述">游戏设计是一项涉及范围非常广的事务，后面会不定期对每个涉及到的环节单独阐述。</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;pre class=&quot;mermaid&quot;&gt;flowchart TB
A{体验}---B{玩家}
A---兴趣曲线
A---间接控制
A---场景
A---a[世界]
a---故事
a---美学
a---空间
a---角色
B---玩家的脑---动机
B---d((界面))---C</summary>
      
    
    
    
    <category term="中文推文" scheme="http://iiishop.github.io/categories/%E4%B8%AD%E6%96%87%E6%8E%A8%E6%96%87/"/>
    
    
    <category term="游戏设计" scheme="http://iiishop.github.io/tags/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>对新项目的一些碎碎念</title>
    <link href="http://iiishop.github.io/2022/10/05/%E5%AF%B9%E6%96%B0%E9%A1%B9%E7%9B%AE%E7%9A%84%E4%B8%80%E4%BA%9B%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    <id>http://iiishop.github.io/2022/10/05/%E5%AF%B9%E6%96%B0%E9%A1%B9%E7%9B%AE%E7%9A%84%E4%B8%80%E4%BA%9B%E7%A2%8E%E7%A2%8E%E5%BF%B5/</id>
    <published>2022-10-04T21:52:20.000Z</published>
    <updated>2022-10-05T06:21:57.714Z</updated>
    
    <content type="html"><![CDATA[<h1 id="立项动机">立项动机</h1><p>因环境的变化，感觉周遭感知到的压力越来越大。记忆中少年时总是恬静而美好，但在如今，却又难以捉摸。</p><p>曾经带来回忆的地方大多以及不存在了。那些实体的药引消失后，能带来治愈的，也只剩下情感了。</p><span id="more"></span><p>曾无数次在梦中见到那些恍惚，如午后的阳光般迷迷朦朦，温暖，令人心安。此处没有令人心烦的催促，也没有令人压抑的人群，留下的只有憧憬和希望。但梦终究是梦，梦醒后，尽管尽力去追寻，却也再无法沉浸入那种感觉。</p><p>音乐是情感很好的载体，感受旋律时，初见的场面和美好会历历浮现在眼前，作为引子，将人拉入回忆。优秀的作曲家能将自己的情感带入音乐，令听者跨越时代而产生共情，或许这也是我钟情于老歌的缘由。</p><p>但音乐带来的即视感终究会是消散的，反复聆听的华丽也会落入尘俗，因而我想要的是能够持久留存的情感。</p><p>那么游戏就作为一个更完美的载体出现了。</p><p>游戏是一种集大成者的媒介，他跨越融合了声光影，且能让观者真实代入角色，达到共情的目的。因此，注意力便被转入此处，或许用一款游戏来重现那份美好，也是一种不错的选择。</p><h1 id="选择此题材的原因">选择此题材的原因</h1><p>这个想法的出现，也已经有三四年了。期间，也曾经有过一些尝试，但总觉得不妥而放弃。</p><p>目前这种形式也算是对游戏性和制作难度上的妥协。原先有过还原一整座2010时期的城市，供自由探索回味的想法，但是这种想法的实现难度太大，而且也不太符合现在的游戏市场。故放弃了开放，转型为线性流程。</p><p>单车可以说是慢节奏生活的一种代表。在游戏中，它是一条线索，贯穿着主人公的整个回忆，也是主人公的一种情感。在游戏中，它是一种载体，能够让玩家回味那个年代的感觉。</p><h1 id="项目的形式">项目的形式</h1><p>整体时常把握在一小时左右，将游戏活动范围缩小到四五个场景中，在游玩过程中，随着回忆的深入，能感受到场景随着时代在变化。</p><p>整个游戏的主题围绕着主人公的一种蜕变，通过这种回忆和体验唤醒了主人公内心深处沉睡的情感，从而让主人公重新找到自己的方向。</p><h1 id="一些建议">一些建议</h1><ol type="1"><li><p>在设计之初先确定故事发生的城市的规划，创作一张城市的俯瞰图，并且在关键的时间点做出城市内容的变化，方便后面设计的代入。</p></li><li><p>在设计游戏的时候，要考虑到玩家的游戏习惯，比如玩家喜欢在游戏中自由探索，那么就要在游戏中留出一些小范围的空间，让玩家自由探索，让玩家亲身体验游戏想传达的氛围，而不是一直被游戏的线索牵着走。</p></li></ol><h1 id="后记">后记</h1><p>这作也算是对我精神上的一种释放，希望能一切尽善尽美，顺利坐成。另外或许我的表达仍然不是那么得清晰，这种情感上的描述也是走向游戏制作人的一大难点，若感觉不大能理解意思，可以继续与我深入交流。</p><p>wish you all the best!</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;立项动机&quot;&gt;立项动机&lt;/h1&gt;
&lt;p&gt;因环境的变化，感觉周遭感知到的压力越来越大。记忆中少年时总是恬静而美好，但在如今，却又难以捉摸。&lt;/p&gt;
&lt;p&gt;曾经带来回忆的地方大多以及不存在了。那些实体的药引消失后，能带来治愈的，也只剩下情感了。&lt;/p&gt;</summary>
    
    
    
    <category term="中文推文" scheme="http://iiishop.github.io/categories/%E4%B8%AD%E6%96%87%E6%8E%A8%E6%96%87/"/>
    
    <category term="游戏企划" scheme="http://iiishop.github.io/categories/%E4%B8%AD%E6%96%87%E6%8E%A8%E6%96%87/%E6%B8%B8%E6%88%8F%E4%BC%81%E5%88%92/"/>
    
    <category term="单车" scheme="http://iiishop.github.io/categories/%E4%B8%AD%E6%96%87%E6%8E%A8%E6%96%87/%E6%B8%B8%E6%88%8F%E4%BC%81%E5%88%92/%E5%8D%95%E8%BD%A6/"/>
    
    
    <category term="DearDeer" scheme="http://iiishop.github.io/tags/DearDeer/"/>
    
    <category term="单车" scheme="http://iiishop.github.io/tags/%E5%8D%95%E8%BD%A6/"/>
    
  </entry>
  
  <entry>
    <title>DearDeer新企划</title>
    <link href="http://iiishop.github.io/2022/10/02/DearDeer%E6%96%B0%E4%BC%81%E5%88%92/"/>
    <id>http://iiishop.github.io/2022/10/02/DearDeer%E6%96%B0%E4%BC%81%E5%88%92/</id>
    <published>2022-10-01T22:26:29.000Z</published>
    <updated>2022-11-19T10:35:29.122Z</updated>
    
    <content type="html"><![CDATA[<h1 id="项目名称">项目名称</h1><p><code>单车</code></p><h1 id="简介">简介</h1><ul><li>社畜主人公在选择淘汰陪伴十年的单车的最后一晚，游历整个城市，将回忆和热情一步步找回的故事</li></ul><span id="more"></span><h1 id="概要">概要</h1><ul><li><h2 id="设计背景">设计背景</h2></li></ul><ol type="1"><li>十年的高速发展使得中国的面貌有了极大改观，它带来了社会生活质量的进步，但也带走了一些灵魂中的东西。</li><li>本项目通过将单车作为这种意识的象征，让其引领主人公在最后一次环行中逐步唤醒心中沉睡的<code>逐步丢失的灵魂</code>，得到身心上的回归和犀利。</li></ol><ul><li><h2 id="设计说明">设计说明</h2><ul><li><h3 id="美术设计">美术设计</h3><code>横版正交视角</code>，参考十三机兵防卫圈。<br>美术设计是此类氛围向游戏的灵魂，通过画面将玩家逐步带入主人公的故事，为玩家沉浸于故事提供了良好的基底。</li><li><h3 id="系统设计">系统设计</h3><pre class="mermaid">   graph TD;  A[人物系统]   B[背景系统]   C[其他系统]  A--&gt;D[人物动画控制]  D--&gt;骑行动画  D--&gt;移动动画  B--&gt;E[时间控制]  E--&gt;清晨  E--&gt;白天  E--&gt;午后  E--&gt;傍晚  E--&gt;夜晚  B--&gt;场景控制  C--&gt;对话系统  C--&gt;时间轴系统  A--&gt;人物时间段切换</pre></li><li><h3 id="剧情脚本设计">剧情脚本设计</h3>本作剧情设定为<code>一小时左右的小短片</code>，故大致为线性剧情，少有分支，但不影响结局。</li><li><strong><em>脚本设计说明</em></strong><ol type="1"><li>先使用<strong>流程图</strong>，将<em>关键的</em><code>时间/空间节点</code>进行串联，并标注每个节点的序号</li><li>再对每个<code>节点</code>展开，撰写具体的对话和动作内容</li></ol>例<code>(十三机兵防卫圈脚本设定集)</code>(加载时间略长，一般需要五分钟左右)：<br><img src="/2022/10/02/DearDeer%E6%96%B0%E4%BC%81%E5%88%92/十三机兵防卫圈剧情脚本.jpg" alt="十三机兵防卫圈剧情脚本.jpg"></li></ul></li></ul><h1 id="目标人员">目标人员</h1><ul><li><h2 id="程序-已足够"><del>程序</del> （已足够）</h2><ol type="1"><li>至少掌握一项面向对象语言</li><li>代码结构明确，文档清晰</li><li>掌握git以及plasticSCM的使用方法</li><li>了解Unity，能够熟练使用Unity则更佳</li><li>拥有较好的沟通能力</li><li>拥有较好的学习能力</li><li>及时反馈</li></ol></li><li><h2 id="美术">美术</h2><ul><li><h3 id="原画美术">原画美术</h3><ol type="1"><li>能够根据剧情以及人物设定，设计出符合氛围的原画作品</li><li>掌握git的使用方法</li><li>拥有较好的沟通能力</li><li>拥有较好的学习能力</li><li>及时反馈</li></ol></li><li><h3 id="d美术">2D美术</h3><ol type="1"><li>能够根据原画设定，绘制出对应的人物或场景物件</li><li>拥有良好的团队协调能力，保证团队画风一致</li><li>掌握git的使用方法</li><li>拥有较好的沟通能力</li><li>拥有较好的学习能力</li><li>及时反馈</li></ol></li><li><h3 id="技术美术">技术美术</h3><ol type="1"><li>能够熟练使用Unity完成Shader、后处理、光线效果、粒子效果等</li><li>代码结构明确，文档清晰</li><li>掌握git以及plasticSCM的使用方法</li><li>拥有较好的沟通能力</li><li>拥有较好的学习能力</li><li>及时反馈</li></ol></li></ul></li><li><h2 id="策划">策划</h2><ul><li><h3 id="文本剧情策划">文本剧情策划</h3><ol type="1"><li>能将剧情以类小说形式撰写</li><li>掌握markdown语言，会使用obsidian进行团队合作</li><li>拥有较好的沟通能力</li><li>拥有较好的学习能力</li><li>及时反馈</li></ol></li><li><h3 id="剧情脚本策划已足够"><del>剧情脚本策划</del>（已足够）</h3><ol type="1"><li>能够将文本剧情抽象成剧情脚本，并且清晰明确</li><li>掌握markdown语言，会使用obsidian进行团队合作</li><li>拥有较好的沟通能力</li><li>拥有较好的学习能力</li><li>及时反馈</li></ol></li><li><h3 id="程序脚本策划架构师">程序脚本策划(架构师)</h3><ol type="1"><li>至少掌握一门面向对象语言</li><li>能够使用多种设计模式进行程序脚本的设计</li><li>了解Unity的工作模式</li><li>掌握markdown语言，会使用obsidian进行团队合作</li><li>掌握Visio的使用方法</li><li>拥有较好的沟通能力</li><li>拥有较好的学习能力</li><li>及时反馈</li></ol></li></ul></li><li><h2 id="音效">音效</h2><ul><li><h3 id="氛围音效bgm">氛围音效(BGM)</h3><ol type="1"><li>拥有从剧情中抽象出氛围并作曲的能力</li><li>掌握git的使用方式</li><li>拥有较好的沟通能力</li><li>拥有较好的学习能力</li><li>及时反馈</li></ol></li><li><h3 id="应用音效">应用音效</h3><ol type="1"><li>拥有对各种细微声效的捕捉和采集能力</li><li>掌握git的使用方式</li><li>拥有较好的沟通能力</li><li>拥有较好的学习能力</li><li>及时反馈</li></ol></li></ul></li></ul><h1 id="开发环境">开发环境</h1><ol type="1"><li>Unity+PlasticSCM <em>开发</em></li><li>Git+GitHub <em>团队资源共享</em></li><li>QQ+飞书+可能会出现的团队合作集成软件 <em>交流</em></li><li>Obsidian+Zerotier <em>设计信息实时共享</em></li><li>Visio <em>流程架构设计</em></li></ol><h1 id="组织架构">组织架构</h1><pre class="mermaid">graph TD;A[制作人]---C[主美术]A---B[主程序]A---D[主策划]H[氛围音效]I[应用音效]D---F[程序脚本策划]---ID-----HD---剧情脚本策划D---文本剧情策划B---G[技术美术]B---应用程序师---IB---FC---2D美术C---原画美术C---GC---H</pre><h1 id="附录">附录</h1><p><a href="https://markdown.com.cn">markdown官方教程</a><br><a href="https://www.liaoxuefeng.com/wiki/896043488029600">廖雪峰git教程</a><br><a href="https://www.runoob.com/csharp/csharp-tutorial.html">RunoobC#教程</a><br><a href="https://learn.u3d.cn">Unity中文课堂</a></p><ul><li>时间表<br><pre class="mermaid">   gantt  title 简化时间图  dateFormat YYYY-MM-DD  axisFormat %m/%d  section 制作  企划书制作 :2022-09-30,3d  新人招收 :2022-10-02,10d  环境搭建及前期工作 :2022-10-01,14d  剧情撰写 :2022-10-05,30d  程序策划及实验 :a,2022-11-01,14d  制作 :b,after a,60d  测试 :after b,10d</pre>更新<br><pre class="mermaid">   gantt  title 现期时间图  dateFormat YYYY-MM-DD  axisFormat %m/%d  剧情撰写 :2022-11-10,40d  demo制作 :a,2022-11-01,50d  剧情逻辑抽象 :b,after a,4d  程序逻辑抽象 :c,after b,3d  制作(暂定) :after c,30d</pre></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;项目名称&quot;&gt;项目名称&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;单车&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&quot;简介&quot;&gt;简介&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;社畜主人公在选择淘汰陪伴十年的单车的最后一晚，游历整个城市，将回忆和热情一步步找回的故事&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="中文推文" scheme="http://iiishop.github.io/categories/%E4%B8%AD%E6%96%87%E6%8E%A8%E6%96%87/"/>
    
    <category term="游戏企划" scheme="http://iiishop.github.io/categories/%E4%B8%AD%E6%96%87%E6%8E%A8%E6%96%87/%E6%B8%B8%E6%88%8F%E4%BC%81%E5%88%92/"/>
    
    
    <category term="游戏企划" scheme="http://iiishop.github.io/tags/%E6%B8%B8%E6%88%8F%E4%BC%81%E5%88%92/"/>
    
    <category term="DearDeer" scheme="http://iiishop.github.io/tags/DearDeer/"/>
    
    <category term="单车" scheme="http://iiishop.github.io/tags/%E5%8D%95%E8%BD%A6/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://iiishop.github.io/2018/09/20/hello-world/"/>
    <id>http://iiishop.github.io/2018/09/20/hello-world/</id>
    <published>2018-09-20T04:23:35.000Z</published>
    <updated>2022-10-03T18:54:57.640Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your veryfirst post. Check <a href="https://hexo.io/docs/">documentation</a> formore info. If you get any problems when using Hexo, you can find theanswer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> oryou can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="quick-start">Quick Start</h2><h3 id="create-a-new-post">Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server">Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files">Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites">Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very
first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for
more info. If you get any problems when using Hexo, you can find the
answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or
you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;</summary>
    
    
    
    <category term="EnglishBlog" scheme="http://iiishop.github.io/categories/EnglishBlog/"/>
    
    
    <category term="Helloworld" scheme="http://iiishop.github.io/tags/Helloworld/"/>
    
    <category term="Test" scheme="http://iiishop.github.io/tags/Test/"/>
    
  </entry>
  
</feed>
