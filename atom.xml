<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>iiishop&#39;s blog</title>
  
  
  <link href="http://iiishop.github.io/atom.xml" rel="self"/>
  
  <link href="http://iiishop.github.io/"/>
  <updated>2023-04-17T01:10:24.833Z</updated>
  <id>http://iiishop.github.io/</id>
  
  <author>
    <name>iiishop</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>置顶公告</title>
    <link href="http://iiishop.github.io/2025/09/30/%E7%BD%AE%E9%A1%B6%E5%85%AC%E5%91%8A/"/>
    <id>http://iiishop.github.io/2025/09/30/%E7%BD%AE%E9%A1%B6%E5%85%AC%E5%91%8A/</id>
    <published>2025-09-30T07:35:36.000Z</published>
    <updated>2023-04-17T01:10:24.833Z</updated>
    
    <content type="html"><![CDATA[]]></content>
    
    
      
      
    <summary type="html">
</summary>
      
    
    
    
    <category term="中文推文" scheme="http://iiishop.github.io/categories/%E4%B8%AD%E6%96%87%E6%8E%A8%E6%96%87/"/>
    
    <category term="公告" scheme="http://iiishop.github.io/categories/%E4%B8%AD%E6%96%87%E6%8E%A8%E6%96%87/%E5%85%AC%E5%91%8A/"/>
    
    
    <category term="公告" scheme="http://iiishop.github.io/tags/%E5%85%AC%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>CPT-103复习1</title>
    <link href="http://iiishop.github.io/2023/05/08/CPT-103%E5%A4%8D%E4%B9%A01/"/>
    <id>http://iiishop.github.io/2023/05/08/CPT-103%E5%A4%8D%E4%B9%A01/</id>
    <published>2023-05-08T00:24:12.000Z</published>
    <updated>2023-05-08T15:48:06.733Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="300fe82548d8634f93ecf64dc9fd95ff9274c815c4f956582eedec922d904bc2"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">有东西被加密了, 请输入密码查看.</summary>
    
    
    
    <category term="中文推文" scheme="http://iiishop.github.io/categories/%E4%B8%AD%E6%96%87%E6%8E%A8%E6%96%87/"/>
    
    <category term="学习" scheme="http://iiishop.github.io/categories/%E4%B8%AD%E6%96%87%E6%8E%A8%E6%96%87/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="数据库" scheme="http://iiishop.github.io/categories/%E4%B8%AD%E6%96%87%E6%8E%A8%E6%96%87/%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="笔记" scheme="http://iiishop.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="XJTLU" scheme="http://iiishop.github.io/tags/XJTLU/"/>
    
    <category term="数据库" scheme="http://iiishop.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="私密" scheme="http://iiishop.github.io/tags/%E7%A7%81%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>阶段性工作汇总</title>
    <link href="http://iiishop.github.io/2023/04/25/%E9%98%B6%E6%AE%B5%E6%80%A7%E5%B7%A5%E4%BD%9C%E6%B1%87%E6%80%BB/"/>
    <id>http://iiishop.github.io/2023/04/25/%E9%98%B6%E6%AE%B5%E6%80%A7%E5%B7%A5%E4%BD%9C%E6%B1%87%E6%80%BB/</id>
    <published>2023-04-25T13:31:10.000Z</published>
    <updated>2023-05-08T00:46:03.696Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="b609aa1ad2e45a6048603c67dd7bbf37b12b271cbd7ba0327e5873d44c10c473">ebf621515920276094afaaae555be3f8a7bb1bb82379acc3d628552400dceef4d045a53ccde871e27922153998f17dd1da13bf74863e82a7a832b93eafec28937e2bc9f12581bd560cf3fff628b8eba791b5198eb5c8164d4f6e82e7060d2caf395078922a33fe89ad5383f1c5ac3fc6d031c4c678f23c8ba486a73005a6e8813c97f5c85d5e6b17400d2e20842b6db83e0b0d35c2e2f6882e1f2c14420520e5c8ec665998aa185eeb52d0a2281b7f00cb6a582d62936a1faa228346e3cd48387c301586972672c0b37ffe6c776d281b33add8e6ba4529f2c63f7593b718857c9eb0761fbaf4a00f0c5e29db45594f85b3a3196e48d49b400c80161486c8ff3b52b6502b4effa03b5a4331a58116c5d4bae770a5cbbdc113a78642c5bc94a9e5254e485b80cb4395b51343c2c98f5cd6d18afe3d14434145eab5c0869b06ee1a9c6ce7d8ef1d7895ba15de1b1433edd042ff0443bfa440c40636b52c1c11e815d9cf423122f912d1296400d6ee7af43fa9fae9f91e2c2c8f24815d7ad078e3794553fd2bb235dfc3b9b94b0d7bfc7ce230fca3146978ff6cfd275435646b173f7210f887e45a0a4d68e5f5b09e49e497dfaae0a550a6e0a96c5dc2a32f19ca93a6b82e1ffedcd75d77cbbefde59b660638422dbe515d4a1b670d3007f472c380ea28b8e5e4eaf4ab16c181fae4d59261e68c0b1a78fd32dacefcb514a64a65c859a1871b4ea10f30b5b8cbe9da8b8e8ce846dc3d78af8db51fb0809227374bab55f07cc183d50488cfd376a567f8b0fa215c96844c75d0c6678a39793cb6ad0f98300be5c42fee53073e616c17d330d0a1e193c50f597afb770e27569948e1e9a638e9c33d824f1dcc1140b5e480159c57163472c1fa9e5236faa5b560e3eec0581c75bd3bd3037580a421cfd83deed73df2f9dc1eefd678ebf9594edf200b73505b2520ba98fbfaf2a8d282eab7e8b272ad900e4d15ae58c722b0b5509dd7fb79f2e8aac6c4a21e444c684e881ae35ed2f6dbfe5d0f8082c9367b3f643aeffd689a55af8d10b0c923132550b7833aa1892b7ec50184b60624476076d3ea3edf530d3ead2af4fd0f4887a3a1a2d238e91a8e9355b34e2b6dcd72cf91ecbb3c1e9e48fc9cc18750ff68ec8f83d6d786504b86a0d442f5e061450d8ccafc9a9e79752741d84e394764bb25bc3e0f7fb54e98719d8db3e5f8dbdec2833f84b8e9a693f0d9790c063dbe2b19aa19681e19ff</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">有东西被加密了, 请输入密码查看.</summary>
    
    
    
    <category term="中文推文" scheme="http://iiishop.github.io/categories/%E4%B8%AD%E6%96%87%E6%8E%A8%E6%96%87/"/>
    
    <category term="游戏企划" scheme="http://iiishop.github.io/categories/%E4%B8%AD%E6%96%87%E6%8E%A8%E6%96%87/%E6%B8%B8%E6%88%8F%E4%BC%81%E5%88%92/"/>
    
    <category term="唤心" scheme="http://iiishop.github.io/categories/%E4%B8%AD%E6%96%87%E6%8E%A8%E6%96%87/%E6%B8%B8%E6%88%8F%E4%BC%81%E5%88%92/%E5%94%A4%E5%BF%83/"/>
    
    
    <category term="DearDeer" scheme="http://iiishop.github.io/tags/DearDeer/"/>
    
    <category term="唤心" scheme="http://iiishop.github.io/tags/%E5%94%A4%E5%BF%83/"/>
    
    <category term="暂未公开" scheme="http://iiishop.github.io/tags/%E6%9A%82%E6%9C%AA%E5%85%AC%E5%BC%80/"/>
    
  </entry>
  
  <entry>
    <title>提问的智慧</title>
    <link href="http://iiishop.github.io/2023/04/04/%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7/"/>
    <id>http://iiishop.github.io/2023/04/04/%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7/</id>
    <published>2023-04-03T18:01:10.000Z</published>
    <updated>2023-04-17T01:10:24.832Z</updated>
    
    <content type="html"><![CDATA[<h1 id="提问的智慧">提问的智慧</h1><h4 id="艾瑞克.史蒂文.雷蒙德eric-steven-raymond">艾瑞克.史蒂文.雷蒙德（EricSteven Raymond）</h4><p>Thyrsus Enterprises</p><p><a href="mailto:esr@thyrsus.com" class="email">esr@thyrsus.com</a><br>#### 瑞克.莫恩（Rick Moen）</p><p><a href="mailto:respond-auto@linuxmafia.com" class="email">respond-auto@linuxmafia.com</a><br>版权©2001, 2006 Eric S. Raymond, Rick Moen<br><span id="more"></span></p><h3 id="修订历史">修订历史</h3><pre class="line-numbers language-none"><code class="language-none">修订版 3.92013年4月23日esr修正链接修订版 3.82012年6月19日esr修正链接修订版 3.72010年12月6日esr对于英语为第二语言人士的有益建议修订版 3.72010年11月2日esr几种翻译不见了修订版 3.62008年3月19日esr小更新及新链接修订版 3.52008年1月2日esr勘误及一些翻译链接修订版 3.42007年3月24日esr新章节：“关于代码的问题”修订版 3.32006年9月29日esr增加凯.尼格曼（Kai Niggemann）的一个好建议修订版 3.22006年1月10日esr加入瑞克.莫恩（Rick Moen）编写的内容修订版 3.12004年10月28日esr文档“谷歌是你的朋友！”修订版 3.02004年2月2日esr主要新增在网页论坛应有的礼节<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="原文how-to-ask-questions-the-smart-way"><a href="http://www.catb.org/~esr/faqs/smart-questions.html">原文：How ToAsk Questions The Smart Way</a></h3><p>翻译：王刚 &lt;yafrank at 126 dot com &gt;<br>时间：2013年10月26日<br>内容</p><h3 id="目录">目录</h3><ul><li><a href="#弃权申明">弃权申明</a></li><li><a href="#引言">引言</a></li><li><a href="#提问前">提问前</a></li><li><a href="#提问时">提问时</a><ul><li><a href="#仔细挑选论坛">仔细挑选论坛</a></li><li><a href="#面向新手的论坛和互联网中继聊天irc通常响应最快">面向新手的论坛和互联网中继聊天（IRC）通常响应最快</a></li><li><a href="#第二步使用项目的邮件列表">第二步，使用项目的邮件列表</a></li><li><a href="#使用有意义且明确的主题">使用有意义且明确的主题</a></li><li><a href="#使问题容易回复">使问题容易回复</a></li><li><a href="#用清晰语法拼写正确的语句书写">用清晰、语法、拼写正确的语句书写</a></li><li><a href="#使用易于读取且标准的文件格式发送问题">使用易于读取且标准的文件格式发送问题</a></li><li><a href="#描述问题应准确且有内容">描述问题应准确且有内容</a></li><li><a href="#量不在多精炼则灵">量不在多，精炼则灵</a></li><li><a href="#别急于宣称找到Bug">别急于宣称找到Bug</a></li><li><a href="#低声下气代替不了做自己的家庭作业">低声下气代替不了做自己的家庭作业</a></li><li><a href="#描述问题症状而不是猜测">描述问题症状而不是猜测</a></li><li><a href="#按时间先后罗列问题症状">按时间先后罗列问题症状</a></li><li><a href="#描述目标而不是过程">描述目标而不是过程</a></li><li><a href="#别要求私下回复电邮">别要求私下回复电邮</a></li><li><a href="#提问应明确">提问应明确</a></li><li><a href="#关于代码的问题">关于代码的问题</a></li><li><a href="#别张贴家庭作业式问题">别张贴家庭作业式问题</a></li><li><a href="#删除无意义的要求">删除无意义的要求</a></li><li><a href="#不要把问题标记为紧急即使对你而言的确如此">不要把问题标记为“紧急”，即使对你而言的确如此</a></li><li><a href="#礼貌总是有益的">礼貌总是有益的</a></li><li><a href="#礼貌总是有益的">问题解决后追加一条简要说明</a></li></ul></li><li><a href="#如何解读回答">如何解读回答</a><ul><li><a href="#读读该死的手册rtfm和搜搜该死的网络stfw如何明白你已完全搞砸">“读读该死的手册”（RTFM）和“搜搜该死的网络”（STFW）：如何明白你已完全搞砸</a></li><li><a href="#如果还不明白">如果还不明白……</a></li><li><a href="#对待无礼">对待无礼</a></li></ul></li><li><a href="#别象失败者那样反应">别象失败者那样反应</a></li><li><a href="#别象失败者那样反应">提问禁忌</a></li><li><a href="#好问题与坏问题">好问题与坏问题</a></li><li><a href="#如果得不到回答">如果得不到回答</a></li><li><a href="#如何更好地回答">如何更好地回答</a></li><li><a href="#相关资源">相关资源</a></li><li><a href="#鸣谢">鸣谢</a></li></ul><blockquote><p>译文： 印尼语 白俄罗斯语 巴西葡萄牙语 简体中文 荷兰语 法语 乔治亚语德语 希腊语 希伯来语 日语 波兰语 葡萄牙语 罗马尼亚语 俄语 西班牙语 泰语如果你想复制、镜像、翻译或引用本文，请参阅我的 复制协议。</p></blockquote><h3 id="弃权申明">弃权申明</h3><p>许多项目的网站在如何取得帮助的部分链接了本文，这没有关系，也正是我们想要的。但如果你是该项目生成此链接的网管，请在链接附近显著位置注明：我们不提供该项目的服务支持！</p><p>我们已经领教了没有此说明带来的痛苦，我们将不停地被一些白痴纠缠，他们认为既然我们发布了本文，那么我们就有责任解决世上所有的技术问题。</p><p>如果你是因为需要帮助正在阅读本文，然后就带着可以直接从作者那取得帮助的印象离开，那么你 就不幸成了我们所说的白痴之一。 别向 我们 提问，我们不会理睬的。我们只是在这教你如何从那些真正懂得你软硬件问题的人那里取得帮助，但99.9％ 的时间我们不会是那些人。除非你非常地 确定本文的作者是你遇到问题方面的专家，请不要打搅，这样大家都更开心一点。</p><h3 id="引言">引言</h3><p>在 黑客的世界里，你所提技术问题的解答很大程度上取决于你提问的方式与解决此问题的难度，本文将教你如何提问才更有可能得到满意的答复。</p><p>开源程序的应用已经很广，你通常可以从其他更有经验的用户而不是黑客那里得到解答。这是好事，他们一般对新手常有的毛病更容忍一点。然尔，使用我们推荐的方法，象对待黑客那样对待这些有经验的用户，通常能最有效地得到问题的解答。</p><p>第一件需要明白的事是黑客喜欢难题和激发思考的好问题。假如不是这样，我们也不会写本文了。如果你能提出一个有趣的问题让我们咀嚼玩味，我们会感激你。好问题是种激励与礼物，帮助我们发展认知，揭示没有注意或想到的问题。在黑客中，“好问题！”是非常热烈而真挚的赞许。</p><p>此外，黑客还有遇到简单问题就表现出敌视或傲慢的名声。有时，我们看起来还对新手和愚蠢的家伙有条件反射式的无礼，但事情并不真是这样。</p><p>我们只是毫无歉意地敌视那些提问前不愿思考、不做自己家庭作业的人。这种人就象时间无底洞──他们只知道索取，不愿意付出，他们浪费了时间，这些时间本可用于其它更有趣的问题或更值得回答的人。我们将这种人叫做“失败者（loser）” （由于历史原因，我们有时将“loser”拼写为“lusers”。）</p><p>我们意识到许多人只是想使用我们写的软件，他们对学习技术细节没有兴趣。对大多数人而言，计算机只是种工具，是种达到目的的手段而已。他们有自己的生活并且有更要紧的事要做，我们承认这点，也从不指望每个人都对这些让我们着迷的技术问题感兴趣。不过，我们回答问题的风格是为了适应那些真正对此有兴趣并愿意主动参与解决问题的人，这一点不会变，也不该变。如果连这都变了，我们就会在自己能做得最好的事情上不再那么犀利。</p><p>我们（大多数）是自愿者，从自己繁忙的生活中抽时间来回答问题，有时会力不从心。因此，我们会毫不留情地滤除问题，特别是那些看起来象是失败者提的，以便更有效地把回答问题的时间留给那些胜利者。</p><p>如果你认为这种态度令人反感、以施惠者自居或傲慢自大，请检查你的假设，我们并未要求你屈服──事实上，假如你做了该做的努力，我们中的大多数将非常乐意平等地与你交流，并欢迎你接纳我们的文化。试图去帮助那些不愿自救的人对我们简直没有效率。不懂没有关系，但愚蠢地做事不行。</p><p>所以，你不必在技术上很在行才能吸引我们的注意，但你 必须表现出能引导你在行的姿态──机敏、有想法、善于观察、乐于主动参与问题的解决。如果你做不到这些使你与众不同的事情，我们建议你付钱跟别人签商业服务合同，而不是要求黑客无偿帮助。</p><p>如果你决定向我们求助，你不会想成为一名失败者，你也不想被看成一个失败者。得到快速有效回答的最好方法是使提问者看起来象个聪明、自信和有想法的人，并且暗示只是碰巧在某一特别问题上需要帮助。</p><p>（欢迎对本文指正，可以将建议发至 esr@thyrsus.com 或respond-auto@linuxmafia.com。 请注意，本文不想成为一般性的 网络礼仪指南，我一般会拒绝那些与引出技术论坛中有用的回答不特别相关的建议。）</p><h3 id="提问前">提问前</h3><p>在通过电邮、新闻组或论坛提技术问题以前，做以下事情：</p><ul><li>尝试在你准备提问论坛的历史文档中搜索答案</li><li>尝试搜索互联网以找到答案</li><li>尝试阅读手册以找到答案</li><li>尝试阅读“常见问题文档”（FAQ）以找到答案</li><li>尝试自己检查或试验以找到答案</li><li>尝试请教懂行的朋友以找到答案</li><li>如果你是程序员，尝试阅读源代码以找到答案</li></ul><p>提问时，请先表明你已做了上述事情，这将有助于建立你不是寄生虫与浪费别人时间的印象。最好再表述你从中学到的东西 ，我们喜欢回答那些表现出能从答案中学习的人。</p><p>运用某些策略，比如用谷歌（Google）搜索你遇到的各种错误提示（既搜索谷歌论坛，也搜索网页），这样很可能直接就找到了解决问题的文档或邮件列表线索。即使没有结果，在邮件列表或新闻组寻求帮助时提一句“我在谷歌中搜过下列句子但没有找到什么有用的东西”也是件好事，至少它表明了搜索引擎不能提供哪些帮助。将搜索关键词与你的问题及可能的解决方案联系起来，还有助于引导其他有类似问题的人。</p><p>别着急，不要指望几秒钟的谷歌搜索就能解决一个复杂的问题。读一下常见问题文档。在向专家提问之前，先向后靠靠放松一下，再思考一下问题。相信我们，他们能从你的提问看出你做了多少阅读与思考，如果你是有备而来，将更有可能得到解答。不要将所有问题一股脑抛出，只因你的第一次搜索没有结果（或者结果太多）。</p><p>认真地思考，准备好你的问题。轻率的提问只能得到轻率的回答，或者压根没有。在提问时，你越是表现出在此前做过思考与努力去解决自己的问题，你越有可能得到真正的帮助。</p><p>注意别提错问题。如果提问基于错误的假设，某黑客多半会一边想“愚蠢的问题……”，一边按将错就错的答案回复你，并且希望这种只是得到你自己“问的问题”而非真正所需的解答，给你一个教训。</p><p>永远不要假设你 有资格得到解答。你没有这种资格，毕竟你没有为此服务付费。如果你能够提出有内容、有趣和激励思考的问题──那种毫无疑问能够向社区贡献经验，而不仅仅是消极地要求从别人那获取知识的问题，你将“挣到”答案。</p><p>另一方面，表明你有能力也乐意参与问题的解决是个很好的开端。“有没有人能指个方向？”，我这还差点什么？”，“我应该查哪个网站？”，通常要比“请给出我可以用的完整步骤”更容易得到回复，因为你表明了只要有人能指个方向，你就很乐意完成剩下的过程。</p><h3 id="提问时">提问时</h3><h4 id="仔细挑选论坛">仔细挑选论坛</h4><p>要对在哪提问留心，如果你做了下述事情，多半会被一笔勾销或被看成“失败者”：</p><ul><li>张贴与论坛主题无关的问题</li><li>在面向高级技术问题的论坛上张贴肤浅的问题，或者反之。</li><li>在太多不同的新闻组同时张贴</li><li>给既非熟人也没有义务解决你问题的人发送你私人的电邮</li></ul><p>为保护通信的渠道不被无关的东西淹没，黑客会除掉那些没有找对地方的问题，你不会想让这种事落到自己头上的。</p><p>因此，第一步是找对论坛。谷歌和其它搜索引擎还是你的朋友，可以用它们搜索你遇到困难的软硬件问题最相关的项目网站。那里通常都有项目的常见问题（FAQ）、邮件列表及文档的链接。如果你的努力（包括阅读FAQ）都没有结果，这些邮件列表就是最后能取得帮助的地方。项目的网站也许还有报告Bug的流程或链接，如果是这样，去看看。</p><p>向陌生的人或论坛发送邮件极有可能是在冒险。譬如，不要假设一个内容丰富的网页的作者想充当你的免费顾问，不要对你的问题是否会受到欢迎做太乐观的估计──如果你不确定，向别处发或者压根别发。</p><p>在选择论坛、新闻组或邮件列表时，别太相信名字，先看看 FAQ或者许可书以明确你的问题是否切题。发贴前先翻翻已有的帖子，这样可以让你感受一下那里行事的方式。事实上，张贴前在新闻组或邮件列表的历史文档中搜索与你问题相关的关键词是个极好的主意，也许就找到答案了。即使没有，也能帮助你归纳出更好的问题。</p><p>别象机关枪似的一次性“扫射”所有的帮助渠道，这就象大喊大叫一样会令人不快，温柔地一个一个来。</p><p>弄懂主题！最典型的错误之一是在某种致立于跨平台可移植的语言、库或工具的论坛中提关于Unix 或 Windows操作系统程序接口的问题。如果你不明白为什么这是大错，最好在搞清楚概念前什么也别问。</p><p>一般来说，在仔细挑选的公共论坛中提问比在私有论坛中提同样的问题更容易得到有用的回答。有几个道理支持这点，一是看潜在的回复者有多少，二是看论坛的参与者有多少，黑客更愿回答能启发多数人的问题。</p><p>可以理解，老练的黑客和一些流行软件的作者正在承受过多的不当消息。就象那根最后压垮骆驼背的稻草一样，你的加入也有可能使情况走向极端──已经好几次了，一些流行软件的作者退出了对自己软件的支持，因为伴随而来的涌入其私人邮箱的垃圾邮件变得无法忍受。</p><h4 id="面向新手的论坛和互联网中继聊天irc通常响应最快">面向新手的论坛和互联网中继聊天（IRC）通常响应最快</h4><p>本地的用户组织或者你所用的 Linux发行版也许正在宣传新手取得帮助的论坛或 IRC通道（在一些非英语国家，新手论坛很可能还是邮件列表），这些地方是开始提问的好去处，特别是当你觉得遇到的也许只是相对简单或者很普通的问题时。经过宣传的IRC 通道是公开邀请提问的地方，通常可以得到实时的回复。</p><p>事实上，如果出问题的程序来自某发行版（这很常见），最好先去该发行版的论坛或邮件列表中提问，再到程序本身的项目论坛或邮件列表，（否则）该项目的黑客可能仅仅回复“用我们的 代码”。</p><p>在任何论坛发贴以前，先看看有没有搜索功能。如果有，就试着用问题的几个关键词搜索一下，也许就有帮助。如果在此之前你已做过全面的网页搜索（你应该这样去做），还是再搜索一下论坛，搜索引擎有可能没来得及索引此论坛的全部内容。</p><p>通过论坛或 IRC通道提供项目的用户支持有增长的趋势，电子邮件交流则更多地为项目开发者保留。所以先在论坛或IRC 中寻求与该项目相关的帮助。</p><h4 id="第二步使用项目的邮件列表">第二步，使用项目的邮件列表</h4><p>当某个项目存在开发者邮件列表时，要向列表而不是其中的个别成员提问，即使你确信他能最好地回答你的问题。查一查项目的文档和主页，找到项目的邮件列表并使用它。采用这种办法有几个很好的理由：</p><ul><li>向个别开发者提的问题（如果）足够好，也将对整个项目组有益。相反，如果你认为自己的问题对整个项目组来说太愚蠢，这也不能成为骚扰个别开发者的理由。</li><li>向列表提问可以分散开发者的负担，个别开发者（尤其是项目领导）也许太忙以至于没法回答你的问题。</li><li>大多数邮件列表都要存档，那些存档将被搜索引擎索引，如果你向列表提问并得到解答，将来其它人可以通过网页搜索找到你的问题和答案，也就不用再次发问了。</li><li>如果某些问题经常被问到，开发者可以利用此信息改进文档或软件本身，以使其更清楚。如果只是私下提问，就没有人能看到最常见问题的完整场景。</li></ul><p>如果一个项目既有 “用户” 也有“开发者”（或“黑客”）邮件列表或论坛，而你又不摆弄那些代码，向“用户”列表或论坛提问。不要假设自己会在开发者列表中受到欢迎，那些人多半会遭受你的噪音干扰。</p><p>然尔，如果你 确信 你的问题不一般，而且在“用户”列表或论坛中几天都没有回复，可以试试“开发者”列表或论坛。建议你在张贴前最好先暗暗地观察几天,至少看看最近几天保存的帖子,以了解那的行事方式（事实上这是参与任何私有或半私有列表的好主意）</p><p>如果你找不到一个项目的邮件列表，而只能查到项目维护者的地址，只管向其发信。即便在这种情况下，也别假设（项目）邮件列表不存在。在你的电子邮件中陈述你已经试过但没有找到合适的邮件列表，也提及你不反对将自己的邮件转发给他人（许多人认为，即使没什么秘密，私人电子邮件也不应该被公开。通过允许将你的电子邮件转发他人，你给了相应人员处置你邮件的选择）。</p><h4 id="使用有意义且明确的主题">使用有意义且明确的主题</h4><p>在邮件列表、新闻组或论坛中，主题是你在五十个或更少的字以内吸引有资格专家注意的黄金机会，不要用诸如“请帮我” （更别提大写的“请帮我！！！！”，这种主题的消息会被条件反射式地删掉）之类的唠叨浪费机会。不要用你痛苦的深度来打动我们，相反，要在这点空间中使用超级简明扼要的问题描述。</p><p>使用主题的好惯例是“对象──偏差”（式的描述），许多技术支持组织就是这样做的。在“对象”部分指明是哪一个或哪一组东西有问题，在“偏差”部分则描述与期望的行为不一致的地方。</p><p>愚蠢：<br>&gt;救命啊！我的笔记本视频工作不正常！</p><p>明智：<br>&gt;X.org 6.8.1 扭曲鼠标光标，MV1005 型号的某显卡芯片组</p><p>更明智：<br>&gt;使用 MV1005 型号的某显卡芯片组在 X.org 6.8.1 的鼠标光标被扭曲</p><p>编写“对象──偏差”式描述的过程有助于你组织对问题的细致思考。是什么被影响了？仅仅是鼠标光标或者还有其它图形？只在X.org 中出现？或只是在其 6.8.1 版中？是针对某显卡芯片组？或者只是其中的MV1005型号？一个黑客只需描一眼就能够立即明白什么是你遇到的问题，什么是你自己的问题。</p><p>更一般地，想象一下在一个只显示主题的文档索引中查找。让你的主题更好地反映问题，可以使下一个搜索类似问题的人能够在文档中直接就找到答案的线索，而不用再次发贴提问。</p><p>如果你想在回复中提问，确保改变主题以表明你是在问一个问题，一个主题象<code>Re: 测试</code> 或者 <code>Re: 新Bug</code>的消息不太可能引起足够的注意。同时，将回复中与新主题不甚相关的引用内容尽量删除。</p><p>对于列表消息，不要直接点击回复（按钮）来开始一个全新的线索，这将限制你的观众。有些邮件阅读程序，比如mutt，允许用户按线索排序并通过折叠线索来隐藏消息，这样做的人永远看不到你发的消息。</p><p>仅仅改变主题还不够。mutt和其它一些邮件阅读程序还要检查邮件头主题以外的其它信息，以便为其指定线索，所以宁可发一个全新的邮件。</p><p>在论坛，因为消息与特定的线索紧密结合，并且通常在线索之外不可见，好的提问方式略有不同，通过回复提问并不要紧。不是所有论坛都允许在回复中出现分离的主题，而且这样做了基本上没有人会去看。不过，通过回复提问本身就是令人怀疑的做法，因为它们只会被正在查看该线索的人读到。所以，除非你只想 在该线索当前活跃的人群中提问，还是另起炉灶比较好。</p><h4 id="使问题容易回复">使问题容易回复</h4><p>以<code>请向……回复</code>来结束问题多半会使你得不到回答。如果你觉得花几秒钟在邮件客户端设置一下回复地址都麻烦，我们也觉得花几秒钟考虑你的问题更麻烦。如果你的邮件客户端程序不支持这样做，换个好点的；如果是操作系统不支持所有这种邮件客户端程序，也换个好点的。</p><p>在论坛，要求通过电子邮件回复是完全无礼的，除非你确信回复的信息也许是敏感的（而且有人会为了某些未知的原因，只让你而不是整个论坛知道答案）。如果你只是想在有人回复线索时得到电子邮件提醒，可以要求论坛发送。几乎所有论坛都支持诸如<code>留意本线索</code>、<code>有回复发送邮件</code>等功能。</p><h4 id="用清晰语法拼写正确的语句书写">用清晰、语法、拼写正确的语句书写</h4><p>经验告诉我们，粗心与草率的作者通常也粗心与草率地思考和编程（我敢打赌）。为这些粗心与草率的思考者回答问题没有什么好处，我们宁可将时间花在其它地方。</p><p>清楚、良好地表达你的问题非常重要。如果你觉得这样做麻烦，我们也觉得注意（你的问题）麻烦。花点额外的精力斟酌一下字句，用不着太僵硬与正式──事实上，黑客文化很看重能准确地使用非正式、俚语和幽默的语句。但它必须 很准确，而且有迹象表明你是在思考和关注问题。</p><p>正确地拼写、使用标点和大小写，不要将 <code>its</code> 混淆为<code>it's</code>，<code>loose</code> 搞成 <code>lose</code> 或者将“discrete” 弄成 “discreet”。不要全部用大写，这会被视为无礼的大声嚷嚷（全部小写也好不到哪去，因为不易阅读。Alan Cox [注：著名黑客，Linux内核的重要参与者] 也许可以这样做，但你不行。）</p><p>一般而言，如果你写得象个半文盲似的傻子，多半得不到理睬。也不要使用即时通讯中的简写，如将<code>you</code> 简化为 <code>u</code>会使你看起来象一个为了节约二次击键的半文盲式的傻子。更糟的是，如果象个小孩似地鬼画桃符那绝对是在找死，可以肯定没人会理你（或者最多是给你一大堆指责与挖苦）。</p><p>如果在非母语论坛提问，你的拼写与语法错误会得到有限的宽容，但懒惰完全不会被容忍（是的，我们通常看得出其中的差别）。同时，除非你知道回复者使用的语言，请使用英语书写。繁忙的黑客一般会直接删除用他们看不懂语言写的消息。在互联网上英语是工作语言，用英语书写可以将你的问题不被阅读就被直接删除的可能性降到最低。</p><p>如果你用英语书写但它是你的第二语言，最好提醒潜在的回复者语言上可能的困难以便绕过这个问题，比如：</p><ul><li>英语不是我的母语，请谅解拼写错误。</li><li>如果您使用某某语言，请电邮/私聊我，也许我需要您的协助翻译我的问题。</li><li>对于这个技术术语本身我很熟悉，但对于它的一些俚语或习惯表达方式就不太明白了。</li><li>我已经同时用某某语及英语提问，如果您使用两者之一回复，我很乐意翻译。</li></ul><h4 id="使用易于读取且标准的文件格式发送问题">使用易于读取且标准的文件格式发送问题</h4><p>如果你人为地将问题搞得难以阅读，它多半会被忽略，人们更愿读易懂的问题，所以：</p><ul><li><p>使用纯文本而不是 HTML（超文本标注语言）（ 关闭HTML并不难）</p></li><li><p>使用MIME（多用途互联网邮件扩展）附件通常没有问题，前提是真正有内容（譬如附带的源文件或补丁），而不仅仅是邮件客户端程序生成的模板（譬如只是消息内容的拷贝）。</p></li><li><p>不要发送整段只是单行句子但多次折回的邮件（这使得回复部分内容非常困难）。设想你的读者是在80个字符宽的文本终端阅读邮件，设置你的行折回点小于80 列。</p></li><li><p>但是，也 不要用任何固定列折回数据（譬如日志文件拷贝或会话记录）。数据应该原样包含，使回复者确信他们看到的是与你看到的一样的东西。</p></li><li><p>在英语论坛中，不要使用'Quoted-Printable' MIME编码发送消息。这种编码对于张贴非 ASCII语言可能是必须的，但很多邮件程序并不支持。当它们分断时，那些文本中四处散布的“=20”符号既难看也分散注意力，甚至有可能破坏内容的语意。</p></li><li><p>永远不要指望黑客们阅读使用封闭的专用格式编写的文档，诸如微软公司的 Word 或 Excel文件等。大多数黑客对此的反应就象有人将还在冒热气的猪粪倒在你门口时你的反应一样。即使他们能够处理，也很厌恶这么做。</p></li><li><p>如果你从使用视窗的电脑发送电子邮件，关闭问题颇多的微软“聪明引用”功能（在“工具”-&gt;“自动纠正选项”的“输入时自动格式化”下去掉聪明引用的选框），以免在你的邮件中到处散布垃圾字符。</p></li><li><p>在论坛，勿滥用“表情符号”和“HTML”功能(当它们提供时)。一两个表情符号通常没有问题，但花哨的彩色文本倾向于使人认为你是个无能之辈。过滥地使用表情符号、色彩和字体会使你看来象个傻笑的小姑娘。这通常不是个好主意，除非你只是对性而不是有用的回复更有兴趣。</p></li><li><p>如果你使用图形用户界面的邮件客户端程序(如网景公司的Messenger、微软公司的 Outlook或者其它类似的)，注意它们的缺省配置不一定满足这些要求。大多数这类程序有基于菜单的<code>查看源码</code>命令，用它来检查发送文件夹中的消息，以确保发送的是没有多余杂质的纯文本文件。</p></li></ul><h4 id="描述问题应准确且有内容">描述问题应准确且有内容</h4><ul><li>仔细、清楚地描述问题的症状</li><li>描述问题发生的环境(主机、操作系统、应用程序，任何相关的)，提供销售商的发行版和版本号（如：“FedoraCore 7”、“Slackware 9.1”等）</li><li>描述提问前做过的研究及其理解。</li><li>描述提问前为确定问题而采取的诊断步骤。</li><li>描述最近对计算机或软件配置的任何相关改变。</li><li>如果可能，提供在可控环境下重现问题的方法。</li><li>尽最大努力预测黑客会提到的问题，并提前备好答案。</li></ul><p>如果你认为是代码有问题，向黑客提供在可控环境下重现问题的方法尤其重要。当你这么做时，得到有用且及时回复的可能性将大大增加。</p><p><a href="http://www.chiark.greenend.org.uk/%7Esgtatham/">西蒙.泰瑟姆（SimonTatham）</a>写过一篇《<a href="http://www.chiark.greenend.org.uk/%7Esgtatham/bugs-tw.html">如何有效报告Bug》</a>的文章，我强烈推荐各位阅读。</p><h4 id="量不在多精炼则灵">量不在多，精炼则灵</h4><p>你应该（写得）精炼且有内容，简单地将一大堆代码或数据罗列在求助消息中达不到目的。如果你有一个很大且复杂的测试样例让程序崩溃，尝试将其裁剪得越小越好。</p><p>至少有三个理由支持这点。第一，让别人看到你在努力简化问题使你更有可能得到回复。第二，简化问题使你更有可能得到<code>有用的</code>回复。第三，在提纯Bug报告的过程中，你可能自己就找到了解决办法或权宜之计。</p><h4 id="别急于宣称找到bug">别急于宣称找到Bug</h4><p>当你在一个软件中遇到问题，除非你 非常、非常的有根据，不要动辄声称找到了Bug。提示：除非你能提供解决问题的源代码补丁，或者对前一版本的回归测试表现出不正确的行为，否则你都多半不够完全确信。对于网页和文档也如此，如果你（声称）发现了文档的“Bug”，你应该能提供相应位置的替代文本。</p><p>记住，还有许多其它用户并未经历你遇到的问题，否则你在阅读文档或搜索网页时就应该发现了（<a href="#你在报怨前已经做了这些，是吧%20？">你在报怨前已经做了这些，是吧？</a>）。这也意味着很有可能是你弄错了而不是软件本身有问题。</p><p>编写软件的人总是非常辛苦地使它尽可能完美。如果你声称找到了Bug，也就置疑了他们的能力，即使你是对的，也有可能会使其中的部分人感到不快。（此外，）在主题中嚷嚷“Bug”也是特别不老练的。</p><p>提问时，即使你私下非常确信已经发现一个真正的Bug，最好写得象是 你做错了什么。如果真的有Bug，你会在回复中看到这点。这样做的话，如果真有虫子，维护者就会向你道歉，这总比你弄砸了然后欠别人一个道歉要强。</p><h4 id="低声下气代替不了做自己的家庭作业">低声下气代替不了做自己的家庭作业</h4><p>有些人明白他们不应该粗鲁或傲慢地行事并要求得到答复，但他们退到相反的低声下气的极端：“我知道我只是个可怜的新丁，一个失败者，但……”。这既使人困扰，也没有用，当伴随着对实际问题含糊的描述时还特别令人反感。</p><p>别用低级灵长类动物的办法浪费你我的时间，相反，尽可能清楚地描述背景情况和你的问题，这比低声下气更好地摆正了你的位置。</p><p>有时，论坛设有单独的初学者提问版面，如果你真的认为遇到了肤浅的问题，到那去就是了，但一样别低声下气。</p><h4 id="描述问题症状而不是猜测">描述问题症状而不是猜测</h4><p>告诉黑客是什么导致了问题是没用的（如果你的诊断理论是了不起的东西，你还会向别人咨询求助吗？）。所以，确保只是告诉他们问题的原始症状，而不是你的解释和理论，让他们来解释和诊断。如果你认为陈述自己的猜测很重要，应清楚地说明这只是你的猜测并描述为什么它们不起作用。</p><p>愚蠢：<br>&gt;我在编译内核时接连遇到 SIG11错误，怀疑主板上的某根电路丝断了，找到它们的最好办法是什么？</p><p>明智：<br>&gt; 我组装的电脑（K6/233 CPU、FIC-PA2007 主板[威盛 Apollo VP2芯片组]、Corsair PC133 SDRAM 256Mb 内存）最近在开机 20分钟左右、做内核编译时频繁地报 SIG11 错，但在头 20分钟内从不出问题。重启动不会复位时钟，但整夜关机会。更换所有内存未解决问题，相关的典型编译会话日志附后。</p><p>由于以上这点许多人似乎难以掌握，这里有句话可以提醒你：“所有的诊断专家都来自密苏里州”。美国国务院的官方座右铭则是“让我看看”（出自国会议员威勒德.D.范迪弗［WillardD.Vandiver］在1899年时的讲话：“我来自一个出产玉米、棉花、牛蒡和民主党人的国家，滔滔雄辩既不能说服我，也不会让我满意。我来自密苏里州，你必须让我看看。”）针对诊断者而言，这并不是怀疑，而只是一种真实而有用的需求，以便让他们看到与你看到的原始证据尽可能一致的东西，而不是你的猜测与总结。（所以，）让我们看看。</p><h4 id="按时间先后罗列问题症状">按时间先后罗列问题症状</h4><p>刚出问题之前发生的事情通常包含有解决问题最有效的线索。所以，记录中应准确地描述你、电脑和软件在崩溃前都做了什么。在命令行处理的情况下，有会话日志（如运行脚本工具生成的）并引用相关的若干（如20）行记录会非常有帮助。</p><p>如果崩溃的程序有诊断选项（如-v详述开关），试着选择这些能在记录中增加排错信息的选项。记住，“多”不等于“好”。试着选取适当的排错级别以便提供有用的信息而不是将阅读者淹没在垃圾中。</p><p>如果你的记录很长（如超过四段），在开头简述问题随后按时间先后罗列详细过程也许更有用。这样，黑客在读你的记录时就知道该注意哪些内容了。</p><h4 id="描述目标而不是过程">描述目标而不是过程</h4><p>如果你想弄清楚如何做某事（而不是报告一个Bug），在开头就描述你的目标，然后才陈述遇到问题的特定步骤。</p><p>经常出现这种情况，寻求技术帮助的人在脑袋里有个更高层次的目标，他们在自以为能达到目标的特定道路上被卡住了，然后跑来问该怎么走，但没有意识到这条路本身有问题，结果要费很大的劲才能通过。</p><p>愚蠢：<br>&gt; 我怎样才能让某图形程序的颜色拾取器取得十六进制的 RGB 值？</p><p>明智：<br>&gt;我正试着用自己选定数值的颜色替换一幅图片的色表，我现在知道的唯一方法是编辑每个表槽，但却无法让某图形程序的颜色拾取器取得十六进制的RGB 值。</p><p>第二种提法是明智的，它使得建议采用更合适的工具以完成任务的回复成为可能。</p><h4 id="别要求私下回复电邮">别要求私下回复电邮</h4><p>黑客们认为问题的解决过程应该公开、透明，此过程中如果更有才能的人注意到不完整或者不当之处，最初的回复才能够、也应该被纠正。同时，作为回复者也因为能力和学识被其它同行看到而得到某种回报。</p><p>当你要求私下回复时，此过程和回报都被中止。别这样做，让 回复者来决定是否私下回答──如果他真这么做了，通常是因为他认为问题编写太差或者太肤浅，以至于对其它人毫无意义。</p><p>对这条规则存在一条有限的例外，如果你确信提问可能会引来大量雷同的回复时，那么“向我发电邮，我将为论坛归纳这些回复”将是神奇的句子。试着将邮件列表或新闻组从洪水般雷同的回复中解救出来是非常有礼貌的──但你必须信守诺言。</p><h4 id="提问应明确">提问应明确</h4><p>漫无边际的问题通常也被视为没有明确限制的时间无底洞。最有可能给你有用答案的人通常也是最忙的人（假如只是因为他们承担了太多工作的话），这些人对于没有止境的时间无底洞极其敏感，所以他们也倾向于讨厌那些漫无边际的问题。</p><p>如果你明确了想让回复者做的事（如指点方向、发送代码、检查补丁或其它），你更有可能得到有用的回复。（因为）这样可以让他们集中精力并间接地设定了他们为帮助你需要花费的时间和精力上限，这很好。</p><p>要想理解专家生活的世界，可以这样设想：那里有丰富的专长资源但稀缺的响应时间。你暗中要求他们奉献的时间越少，你越有可能从这些真正懂行也真正很忙的专家那里得到解答。</p><p>所以限定你的问题以使专家回答时需要付出的时间最少──这通常与简化问题还不太一样。举个例，“请问可否指点一下哪有好一点的X 解释？”通常要比“请解释一下X”明智。如果你的代码不运行了，通常请别人看看哪有问题比叫他们帮你改正更明智。</p><h4 id="关于代码的问题">关于代码的问题</h4><p>别要求他人给你出问题的代码排错而不提及应该从何入手。张贴几百行的代码，然后说一声“它不能运行”会让你得不到理睬。只贴几十行代码，然后说一句“在第七行以后，本应该显示<x>，但实际出现的是<y>”非常有可能让你得到回复。</y></x></p><p>最精确描述代码问题的方法是提供一个能展示问题的最小测试样例。什么是最小测试样例？它是对问题的展现，只需要刚好能够重现非预期行为的代码即可。如何生成一个最小测试样例？如果你知道哪一行或哪一段代码会产生问题，将其复制并提供刚好够用的外围支撑代码以构成一个完整的样例（够用是指源码刚好能被编译器、解释器或任何处理它的程序所接受）。如果你不能将问题缩小到特定的段落，复制源码并去除那些与问题无关的代码段。你能提供的最小测试样例越小越好（参见量不在多，精炼则灵 ）。</p><p>生成一个非常小的最小测试样例并不总是可能，但尽力去做是很好的锻练，这有可能帮助你找到需要自己解决的问题。即使你找不到，黑客们喜欢看到你努力过，这将使他们更合作。</p><p>如果你只是想让别人帮忙审一下代码，在最开头就要说出来，并且一定要提到你认为哪一部分特别需要关注以及为什么。</p><h4 id="别张贴家庭作业式问题">别张贴家庭作业式问题</h4><p>黑客们善于发现“家庭作业”式的问题。我们中的大多数人已经做了自己的家庭作业，那是该你做的，以便从中学到东西。问一下提示没有关系，但不是要求完整的解决方案。</p><p>如果你怀疑自己碰到了一个家庭作业式的问题，但仍然无法解决，试试在用户组、论坛或（作为最后一招）在项目的“用户”邮件列表或论坛中提问。尽管黑客们会 看出来，一些老用户也许仍会给你提示。</p><h4 id="删除无意义的要求">删除无意义的要求</h4><p>抵制这种诱惑，即在求助消息末尾加上诸如“有人能帮我吗？”或“有没有答案？”之类在语义上毫无意义的东西。第一，如果问题描述还不完整，这些附加的东西最多也只能是多余的。第二，因为它们是多余的，黑客们会认为这些东西烦人──就很有可能用逻辑上无误但打发人的回复，诸如“是的，你可以得到帮助”和“不，没有给你的帮助”。</p><p>一般来说，避免提“是或否”类型的问题，除非你想得到“是或否”类型的回答。</p><h4 id="不要把问题标记为紧急即使对你而言的确如此">不要把问题标记为“紧急”，即使对你而言的确如此</h4><p>这是你的问题，不要我们的。宣称“紧急”极有可能事与愿违：大多数黑客会直接删除这种消息，他们认为这是无礼和自私地企图得到即时与特殊的关照。而且“紧急”或其它有类似含义的主题有可能触发垃圾过滤规则，潜在的回复者可能永远看不到你的问题！</p><p>有一点点局部的例外，如果你是在一些知名度很高、会使黑客们激动的地方使用程序，也许值得这样去做。在这种情况下，如果你有期限压力，也很有礼貌地提到这点，人们也许会有足够的兴趣快一点回答。</p><p>当然，这是非常冒险的，因为黑客们对什么是令人激动的标准多半与你的不同。譬如从国际空间站这样张贴没有问题，但代表感觉良好的慈善或政治原因这样做几乎肯定不行。事实上，张贴诸如“紧急：帮我救救这个毛绒绒的小海豹！”肯定会被黑客回避或光火，即使他们认为毛绒绒的小海豹很重要。</p><p>如果你觉得这不可思议，再把剩下的内容多读几遍，直到弄懂了再发贴也不迟。</p><h4 id="礼貌总是有益的">礼貌总是有益的</h4><p>礼貌一点，使用 <code>请</code> 和 <code>谢谢你的关注</code> 或者<code>谢谢你的关照</code>，让别人明白你感谢他们无偿花时间帮助你。</p><p>坦率地讲，这一点没有语法正确、文字清晰、准确、有内容和避免使用专用格式重要（同时也不能替代它们）。黑客们一般宁可读有点唐突但技术鲜明的Bug报告，而不是那种有礼但含糊的报告。（如果这点让你不解，记住我们是按问题能教我们什么来评价它的）</p><p>然尔，如果你已经谈清楚了技术问题，客气一点肯定会增加你得到有用回复的机会。</p><p>（我们必须指出，本文唯一受到一些老黑客认真反对的地方是以前曾经推荐过的“提前谢了”，一些黑客认为这隐含着事后不用再感谢任何人的暗示。我们的建议是要么先说<code>提前谢了</code>，事后 再对回复者表示感谢，要么换种方式表达，譬如用 <code>谢谢你的关注</code> 或<code>谢谢你的关照</code>）。</p><h4 id="问题解决后追加一条简要说明">问题解决后追加一条简要说明</h4><p>问题解决后向所有帮助过的人追加一条消息，让他们知道问题是如何解决的并再次感谢。如果问题在邮件列表或新闻组中受到广泛关注，在那里追加此消息比较恰当。</p><p>最理想的方式是向最初提问的线索回复此消息，并在主题中包含<code>已解决</code>、<code>已搞定</code>或其它同等含义的明显标记。在人来人往的邮件列表里，一个看见线索<code>问题 X</code> 和 <code>问题 X-已解决</code>的潜在回复者就明白不用再浪费时间了（除非他个人觉得“问题X”有趣），因此可以利用此时间去解决其它问题。</p><p>追加的消息用不着太长或太复杂，一句简单的“你好──是网线坏了！谢谢大家──比尔”就比什么都没有要强。事实上，除非解决问题的技术真正高深，一条简短而亲切的总结比长篇大论要好。说明是什么行动解决了问题，用不着重演整个排错的故事。</p><p>对于有深度的问题，张贴排错历史的摘要是恰当的。描述问题的最终状态，说明是什么解决了问题，在此之后才指明可以避免的弯路。应避免的弯路部分应放在正确的解决方案和其它总结材料之后，而不要将此消息搞成侦探推理小说。列出那些帮助过你的名字，那样你会交到朋友的。</p><p>除了有礼貌、有内容以外，这种类型的追帖将帮助其他人在邮件列表、新闻组或论坛文档中搜索到真正解决你问题的方案，从而也让他们受益。</p><p>最后，此类追帖还让每位参与协助的人因问题的解决而产生一种满足感。如果你自己不是技术专家或黑客，相信我们，这种感觉对于你寻求帮助的老手和专家是非常重要的。问题叙述到最后不知所终总是令人沮丧的，黑客们痒痒地渴望它们被解决。<code>挠痒痒</code>为你挣到的信誉将对你下次再次张贴提问非常非常的有帮助。</p><p>考虑一下怎样才能避免他人将来也遇到类似的问题，问问自己编一份文档或FAQ 补丁会不会有帮助，如果是的话就将补丁发给维护者。</p><p>在黑客中，这种良好的后继行动实际上比传统的礼貌更重要，也是你善待他人而赢得声誉的方式，这是非常有价值的财富。</p><h3 id="如何解读回答">如何解读回答</h3><h4 id="读读该死的手册rtfm和搜搜该死的网络stfw如何明白你已完全搞砸">“读读该死的手册”（RTFM）和“搜搜该死的网络”（STFW）：如何明白你已完全搞砸</h4><p>有一个古老而神圣的传统：如果你收到<code>读读该死的手册</code>（RTFM）的回复，发信人认为你应该去“读读该死的手册”。他或她多半是对的，去读一下吧。</p><p>“读读该死的手册”（RTFM）有个年轻一点的亲戚，如果你收到“搜搜该死的网络”（STFW）的回复，发信人认为你应该“搜搜该死的网络”。那人多半也是对的，去搜一下吧。(更温和一点的说法是“<a href="http://lmgtfy.com/">谷歌是你的朋友！</a>”)</p><p>在论坛，你也可能被要求去搜索论坛的文档。事实上，有人甚至可能热心地为你提供以前解决此问题的线索。但不要依赖这种关照，提问前应该先搜索一下文档。</p><p>通常，叫你搜索的人已经打开了能解决你问题的手册或网页，正在一边看一边敲键盘。这些回复意味着他认为：</p><ul><li>第一，你要的信息很容易找到。</li><li>第二，自已找要比别人喂到嘴里能学得更多。</li></ul><p>你不应该觉得这样就被冒犯了，按黑客的标准，回复者没有不理你就是在向你表示某种尊敬，你反而应该感谢他热切地想帮助你。</p><h4 id="如果还不明白">如果还不明白……</h4><p>如果你看不懂回答，不要马上回复一个要求说明的消息，先试试那些最初提问时用过的相同工具（如手册、FAQ、网页、懂行的朋友等）试着搞懂回答。如果还是需要说明，展现你已经明白的。</p><p>譬如，假如我告诉你：“看起来象是某输入项有问题，你需要清除它”，接着是个不好 的回帖：“什么是某输入项？”。而这是一个 很好的跟帖：“是的，我读了手册，某某输入项只在 -z 和 -p开关中被提到，但都没有涉及到如何清除它们，你指的是哪一个还是我弄错了什么？”</p><h4 id="对待无礼">对待无礼</h4><p>很多黑客圈子中看似无礼的行为并不是存心冒犯。相反，它是直接了当、一针见血式的交流风格，这种风格对于更关注解决问题而不是使别人感觉舒服而混乱的人是很自然的。</p><p>如果你觉得被冒犯了，试着平静地反应。如果有人真的做了过格的事，邮件列表、新闻组或论坛中的前辈多半会招呼他。如果这没有发生而你却光火了，那么你发火对象的言语可能在黑客社区中看起来是正常的，而你 将被视为有错的一方，这将伤害到你获取信息或帮助的机会。</p><p>另一方面，你会偶而真的碰到无礼和无聊的言行。与上述相反，对真正的冒犯者狠狠地打击、用犀利的语言将其驳得体无完肤都是可以接受的。然尔，在行事之前一定要非常非常的有根据。纠正无礼的言论与开始一场毫无意义的口水战仅一线之隔，黑客们自己莽撞地越线的情况并不鲜见。如果你是新手或外来者，避开这种莽撞的机会并不高。如果你想得到的是信息而不是消磨时光，这时最好不要把手放在键盘上以免冒险。</p><p>（有些人断言很多黑客都有轻度的自闭症或阿斯伯格综合症，缺少用于润滑人类社会“正常”交往所需的脑电路。这既可能是真也可能是假。如果你自己不是黑客，兴许你认为我们脑袋有问题还能帮助你应付我们的古怪行为。只管这么干好了，我们不在乎。我们喜欢 现在这个样子，并且一般都对病号标记有站得住脚的怀疑。）</p><p>在下一节，我们会谈到另一个问题，当 你 行为不当时会受到的“冒犯”。</p><h3 id="别象失败者那样反应">别象失败者那样反应</h3><p>在黑客社区的论坛中有那么几次你可能会搞砸──以本文描述或类似的方式。你会被示众是如何搞砸的，也许言语中还会带点颜色。</p><p>这种事发生以后，你能做的最糟糕的事莫过于哀嚎你的遭遇、宣称被口头攻击、要求道歉、高声尖叫、憋闷气、威胁诉诸法律、向其雇主报怨、忘了关马桶盖等等。相反，你该这样去做：</p><p>熬过去，这很正常。事实上，它是有益健康与恰当的。</p><p>社区的标准不会自己维持，它们是通过参与者积极而 公开地执行来维持的。不要哭嚎所有的批评都应该通过私下的邮件传送，这不是事情运作的方式。当有人评论你的一个说法有误或者提出不同看法时，坚持声称受到个人攻击也毫无益处，这些都是失败者的态度。</p><p>也有其它的黑客论坛，受过高礼节要求的误导，禁止参与者张贴任何对别人帖子挑毛病的消息，并声称“如果你不想帮助用户就闭嘴”。有思路的参与者纷纷离开的结果只会使它们变成了毫无意义的唠叨与无用的技术论坛。</p><p>是夸张的“友谊”（以上述方式）还是有用？挑一个。</p><p>记着：当黑客说你搞砸了，并且(无论多么刺耳地)告诉你别再这样做时，他正在为关心你和他的社区而行动。对他而言，不理你并将你从他的生活中滤除要容易得多。如果你无法做到感谢，至少要有点尊严，别大声哀嚎，也别因为自己是个有戏剧性超级敏感的灵魂和自以为有资格的新来者，就指望别人象对待脆弱的洋娃娃那样对你。</p><p>有时候，即使你没有搞砸（或者只是别人想象你搞砸了），有些人也会无缘无故地攻击你本人。在这种情况下，报怨倒是 真的会把问题搞砸。</p><p>这些找茬者要么是毫无办法但自以为是专家的不中用家伙，要么就是测试你是否真会搞砸的心理专家。其它读者要么不理睬，要么用自己的方式对付他们。这些找茬者在给自己找麻烦，这点你不用操心。</p><p>也别让自己卷入口水战，大多数口水战最好不要理睬──当然，是在你核实它们只是口水战、没有指出你搞砸的地方，而且没有巧妙地将问题真正的答案藏于其中之后（这也是可能的）。</p><h3 id="提问禁忌">提问禁忌</h3><p>下面是些典型的愚蠢问题和黑客不回答它们时的想法。</p><p>问：我到哪可以找到某程序或 X 资源？</p><p>问：我怎样用 X 做 Y？</p><p>问：如何配置我的 shell 提示？</p><p>问：我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 文档转为 TeX格式吗？</p><p>问：我的{程序、配置、SQL 语句}不运行了</p><p>问：我的视窗电脑出问题了，你能帮忙吗？</p><p>问：我的程序不运行了，我认为系统工具X有问题</p><p>问：我安装 Linux 或 X 遇到困难，你能帮忙吗？</p><p>问：我如何才能破解超级用户口令/盗取通道操作员的特权/查看某人的电子邮件？</p><hr><p>问：<br>&gt; 我到哪可以找到某程序或 X 资源？</p><p>答：<br>&gt;在我找到它的同样地方，笨旦──在网页搜索引擎上。上帝啊，难道还有人不知道如何使用谷歌 吗？</p><p>问：<br>&gt; 我怎样用 X 做 Y？</p><p>答：<br>&gt; 如果你想解决的是Y，提问时别给出可能并不恰当的方法。这种问题说明提问者不但对 X完全无知，也对要解决的 Y问题糊涂，还被特定形势禁锢了思维。等他们把问题弄好再说。</p><p>问：<br>&gt; 如何配置我的 shell 提示？</p><p>答：<br>&gt; 如果你有足够的智慧提这个问题，你也该有足够的智慧去“读读该死的手册”（RTFM），然后自己去找出来。</p><p>问：<br>&gt; 我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 文档转为 TeX格式吗？</p><p>答：<br>&gt;试试就知道了。如果你试过，你既知道了答案，又不用浪费我的时间了。</p><p>问：<br>&gt; 我的{程序、配置、SQL 语句}不运行了</p><p>答：<br>&gt;这不是一个问题，我也没有兴趣去猜你有什么问题──我有更要紧的事要做。看到这种东西，我的反应一般如下：</p><ul><li>你还有什么补充吗？</li><li>噢，太糟了，希望你能搞定。</li><li>这跟我究竟有什么关系？</li></ul><p>问：<br>&gt; 我的视窗电脑出问题了，你能帮忙吗？</p><p>答：<br>&gt; 是的，把视窗垃圾删了，装个象 Linux 或 BSD 的开源操作系统吧。</p><p>注意：如果程序有官方的视窗版或者与视窗有交互(如 Samba)，你 可以问与视窗相关的问题，只是别对问题是由视窗操作系统而不是程序本身造成的回复感到惊讶，因为视窗一般来说太差，这种说法一般都成立。</p><p>问：<br>&gt; 我的程序不运行了，我认为系统工具 X 有问题</p><p>答：<br>&gt;你完全有可能是第一个注意到被成千上万用户反复使用的系统调用与库文件有明显缺陷的人，更有可能的是你完全没有根据。不同凡响的说法需要不同凡响的证据，当你这样声称时，你必须有清楚而详尽的缺陷说明文档作后盾。</p><p>问：<br>&gt; 我安装 Linux 或 X 遇到困难，你能帮忙吗？</p><p>答：<br>&gt; 不行，我需要亲手操作你的电脑才能帮你排错，去向当地的 Linux用户组寻求方便的帮助（你可以在 这里 找到用户组列表）</p><p>注意：如果安装问题与某 Linux 发行版有关，在针对 它的邮件列表、论坛或本地用户组织中提问也许是恰当的。此时，应描述问题的准确细节。在此之前，先用“linux”和 所有 被怀疑的硬件 [作关键词] 仔细搜索。</p><p>问：<br>&gt;我如何才能破解超级用户口令/盗取通道操作员的特权/查看某人的电子邮件？</p><p>答：<br>&gt;想做这种事情说明你是个卑劣的家伙，想让黑客教你做这种事情说明你是个白痴。</p><h4 id="好问题与坏问题">好问题与坏问题</h4><p>最后，我将通过举例来演示提问的智慧。同样的问题两种提法，一种愚蠢，另一种明智。</p><p>愚蠢：我在哪能找到关于 Foonly Flurbamatic 设备的东西？<br>&gt; 这个问题在乞求得到 “搜搜该死的网络”（STFW） 式的回复。</p><p>明智： 我用谷歌搜索过“Foonly Flurbamatic2600”，但没有找到什么有用的，有谁知道在哪能找到这种设备的编程信息？<br>&gt; 这个人已经搜索过网络了，而且听起来他可能真的遇到了问题。</p><p>愚蠢： 我不能编译某项目的源代码，它为什么这么破？<br>&gt; 提问者假设是别人搞砸了，太自大了。</p><p>明智： 某项目的源代码不能在某 Linux 6.2版下编译。我读了常见问题文档，但其中没有与某 Linux相关的内容。这是编译时的记录，我做错了什么吗？<br>&gt;提问者已经指明了运行环境，读了常见问题文档（FAQ），列出了错误，也没有假设问题是别人的过错，这家伙值得注意。</p><p>愚蠢： 我的主板有问题，谁能帮我？<br>&gt;某黑客对此的反应可能是：“是的，还需要帮你拍背和换尿布吗？”，然后是敲下删除键。</p><p>明智： 我在 S2464 主板上试过 X、Y 和 Z，当它们都失败后，又试了 A、B和 C。注意我试 C时的奇怪症状，显然某某东西正在做某某事情，这不是期望的行为。通常在Athlon MP主板上导致某某事情的原因是什么？有谁知道我还能再试点什么以确定问题？<br>&gt;相反地，这个人看来值得回答。他或她展现了解决问题的能力而不是坐等天上掉馅饼。</p><p>在最后那个问题中，注意“给我一个回答”与“请帮我看看我还能再做点什么测试以得到启发”之间细微但重要的差别。</p><p>事实上，最后那个问题基本上源于 2001 年 8 月 Linux内核邮件列表（lkml）上的真实事件，是我（Eric）当时提了那个问题，我发现Tyan S2462主板有神秘的死机现象，邮件列表成员给我提供了解决此问题的关键信息。</p><p>通过这种提问方式，我给了别人可以咀嚼玩味的东西。我设法使之对参与者既轻松又有吸引力，也表明了对同行能力的尊敬并邀请他们与我一起协商。通过告诉他们我已经走过的弯路，我还表明了对他们宝贵时间的尊重。</p><p>事后，当我感谢大家并评论这次良好的经历时，一个 Linux内核邮件列表的成员谈到，他认为我得到答案并不是因为我的名字挂在列表上，而只是因为我正确的提问方式。</p><p>黑客们在某种方面是非常不留情面的精英分子。我想在这事上他是对的，如果我表现得象个不劳而获的寄生虫，不管我是谁都会被忽略或斥责。他建议将整个事件作为对其它人提问的指导，这直接导致了本文的编写。</p><h3 id="如果得不到回答">如果得不到回答</h3><p>如果得不到回答，请不要认为我们不想帮你，有时只是因为被问到的小组成员的确不知道答案。没有回复不等于不被理睬，当然必须承认从外面很难看出两者的差别。</p><p>一般而言，直接将问题再张贴一次不好，这会被视为毫无意义的骚扰。耐心一点，知道你问题答案的人可能生活在不同的时区，有可能正在睡觉，也有可能你的问题一开始就没有组织好。</p><p>还有其它资源可以寻求帮助，通常是在一些面向新手的资源中。</p><p>有许多在线与本地的用户组织，虽然它们自己不编写任何软件，但是对软件很热心。这些用户组通常因互助和帮助新手而形成。</p><p>还有众多大小商业公司提供签约支持服务，别因为要付点钱才有支持就感到沮丧！毕竟，如果你车子的汽缸垫烧了，你多半还得花钱找个修理店把它弄好。即使软件没花你一分钱，你总不能指望服务支持都是免费的。</p><p>象 Linux这样流行的软件，每个开发者至少有一万个以上的用户，一个人不可能应付这么多用户的服务要求。记住，即使你必须付费才能得到支持，也比你还得额外花钱买软件要少得多（而且对封闭源代码软件的服务支持与开源软件相比通常还要贵一点，也要差一点）。</p><h3 id="如何更好地回答">如何更好地回答</h3><p>态度和善一点。问题带来的压力常使人显得无礼或愚蠢，其实并不是这样。</p><p>对初犯者私下回复。对那些坦诚犯错之人没有必要当众羞辱，一个真正的新手也许连怎么搜索或在哪找FAQ 都不知道。</p><p>如果你不确定，一定要说出来！一个听起来权威的错误回复比没有还要糟，别因为听起来象个专家好玩就给别人乱指路。要谦虚和诚实，给提问者与同行都树个好榜样。</p><p>如果帮不了忙，别妨碍。不要在具体步骤上开玩笑，那样也许会毁了用户的安装──有些可怜的呆瓜会把它当成真的指令。</p><p>探索性的反问以引出更多的细节。如果你做得好，提问者可以学到点东西──你也可以。试试将很差的问题转变成好问题，别忘了我们都曾是新手。</p><p>尽管对那些懒虫报怨一声“读读该死的手册”（RTFM）是正当的，指出文档的位置（即使只是建议做个谷歌关键词搜索）会更好</p><p>如果你决意回答，给出好的答案。当别人正在用错误的工具或方法时别建议笨拙的权宜之计，应推荐更好的工具，重新组织问题。</p><p>请回答真正的问题！如果提问者已经做了自己该做的研究，并且说明尝试过<code>X，Y，Z，A，B 与 C</code>都没有得到想要的結果，那么回复 <code>试试 A 或 B</code>或者给出一个内容为 <code>试一下 X，Y，Z，A，B 或 C</code>的链接将极其无益！</p><p>帮助你的社区从中学习。当回复一个好问题时，问问自己<code>如何修改相关文件或 FAQ 文档以免再次解答同样的问题？</code>，接着再向文档维护者发一份补丁。</p><p>如果你是在研究一番后才做出的回答，展现你的技巧而不是直接端出结果。毕竟“授人以鱼，不如授人以渔”。</p><h3 id="相关资源">相关资源</h3><p>如果需要个人电脑、Unix 和互联网如何工作的基础知识，参阅 <a href="http://en.tldp.org/HOWTO/Unix-and-Internet-Fundamentals-HOWTO/">Unix和互联网工作的基本原理</a>。</p><p>当你发布软件或补丁时，试着按 <a href="http://en.tldp.org/HOWTO/Software-Release-Practice-HOWTO/index.html">软件发布实践</a>操作。</p><h3 id="鸣谢">鸣谢</h3><p>伊夫林.米切尔（EvelynMitchell）贡献了一些愚蠢问题例子并启发了编写<code>如何更好地回答问题</code>这一节，米哈伊尔.罗门迪克（MikhailRamendik）贡献了一些特别有价值的建议和改进。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;提问的智慧&quot;&gt;提问的智慧&lt;/h1&gt;
&lt;h4 id=&quot;艾瑞克.史蒂文.雷蒙德eric-steven-raymond&quot;&gt;艾瑞克.史蒂文.雷蒙德（Eric
Steven Raymond）&lt;/h4&gt;
&lt;p&gt;Thyrsus Enterprises&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;mailto:esr@thyrsus.com&quot; class=&quot;email&quot;&gt;esr@thyrsus.com&lt;/a&gt;&lt;br&gt;
#### 瑞克.莫恩（Rick Moen）&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;mailto:respond-auto@linuxmafia.com&quot; class=&quot;email&quot;&gt;respond-auto@linuxmafia.com&lt;/a&gt;&lt;br&gt;
版权©2001, 2006 Eric S. Raymond, Rick Moen&lt;br&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="中文推文" scheme="http://iiishop.github.io/categories/%E4%B8%AD%E6%96%87%E6%8E%A8%E6%96%87/"/>
    
    <category term="学习" scheme="http://iiishop.github.io/categories/%E4%B8%AD%E6%96%87%E6%8E%A8%E6%96%87/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="参考书" scheme="http://iiishop.github.io/categories/%E4%B8%AD%E6%96%87%E6%8E%A8%E6%96%87/%E5%AD%A6%E4%B9%A0/%E5%8F%82%E8%80%83%E4%B9%A6/"/>
    
    
    <category term="参考书" scheme="http://iiishop.github.io/tags/%E5%8F%82%E8%80%83%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>ObjectPool</title>
    <link href="http://iiishop.github.io/2023/03/30/ObjectPool/"/>
    <id>http://iiishop.github.io/2023/03/30/ObjectPool/</id>
    <published>2023-03-30T12:00:40.000Z</published>
    <updated>2023-04-17T01:10:24.829Z</updated>
    
    <content type="html"><![CDATA[<h1 id="introduce">Introduce</h1><p>In our recent game production experience, we often faced the problemof excessive memory consumption.<br>For example, when pressed Shift kay, the player can get a high speed,and some shadow will appear in the path. If we instantiate and destorythe shadow object every time, the memory will be greatly wasted. So, weneed to use <code>ObjectPool</code> to deal with this situation.<br><span id="more"></span></p><h1 id="background">Background</h1><p>In this section, we will discuss what is <code>ObjectPool</code>, andwhy <code>ObjectPool</code> can solve this problem.</p><ul><li><h2 id="what-is-objectpool">What is <code>ObjectPool</code></h2><p>Interpret it literally, ObjectPool is a pool filled with objects.Then we can get or return the object from this pool.</p></li><li><h2 id="why-objectpool-can-solve-this-problem">Why<code>ObjectPool</code> can solve this problem</h2><p>The worest part of the <strong>Instantiate-Destory</strong> way is itapplied and used the memory for only a while before it was discarded.So, when we use the ObjectPool pattern, everything that only be used awhile will be created in the pool for preparation.</p><p>Now, we built and changed to use the ObjectPool pattern. The objectswe need to use are already created in the pool. When we need the object,we only need to get from the pool, then return into the pool.</p></li></ul><p>In the next section, I will show the structure of ObjectPool.</p><h1 id="structure">Structure</h1><ul><li>Design Pattern: <strong>Signleton</strong></li><li>Variables:<ol type="1"><li><strong><em>static</em></strong> ObjectPool<strong>Instance</strong></li><li>int <strong>Pool_Size</strong></li><li>List&lt;GameObject&gt; <strong>Prefabs</strong><strong><em>//Because I use the ObjectPool in Unity, you can use othertype.</em></strong></li><li>Dictionary&lt;string, Queue&lt;GameObject&gt;&gt;<strong>Available_Objects_Dictionary</strong></li></ol></li><li>Functions:<ol type="1"><li>void <strong>Awake</strong>()</li><li>void <strong>FillPool</strong>()</li><li>void <strong>ReturnPool</strong>()</li><li>GameObject <strong>GetPool</strong>()</li></ol></li></ul><h1 id="variables">Variables</h1><ul><li><h2 id="instance">Instance</h2>Instance is a instance of ObjectPool class, we will access this variablein other script to use the ObjectPool.</li><li><h2 id="pool_size">Pool_Size</h2>Pool_Size is the basic size of the ObjectPool, all objects will becreated in size copies in the pool at script awake.<br></li><li><h2 id="prefabs">Prefabs</h2>Prefabs can be added at the Unity Interface, and they will be created inthe pool.</li><li><h2 id="available_objects_dictionary">Available_Objects_Dictionary</h2>This variable is the most important part, it can allow we to invoke theObjectPool by the name of object. The value of the dictionary is aqueue, it is the main part of the ObjectPool or we can call this is thepool. Every object will be stored in this queue.</li></ul><h1 id="functions">Functions</h1><ul><li><h2 id="awake">Awake</h2><p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Instance <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> Instance <span class="token operator">!=</span> <span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">Destroy</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        Instance <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token function">FillPool</span><span class="token punctuation">(</span>Pool_Size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><p><code>Awake</code> is the standard part of a Signleton class, it isused to be sure the program only has one instance. When the instance isnot the first instance, it will kill the instance. And if it is, thisfunction will invoke <code>FillPool</code>.</p></li><li><h2 id="fillpool">FillPool</h2><p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">FillPool</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> Size<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> Prefab <span class="token keyword">in</span> Prefabs<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">var</span></span> obj <span class="token operator">=</span> <span class="token function">instantiate</span><span class="token punctuation">(</span>Prefab<span class="token punctuation">,</span> transform<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">ReturnPool</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><p><code>FillPool</code> will fill the pool by evey prefab in thePrefabs. It will invoke <code>ReturnPool</code> to do a standard processto return the object into the pool.</p></li><li><h2 id="returnpool">ReturnPool</h2><p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ReturnPool</span><span class="token punctuation">(</span><span class="token class-name">GameObject</span> Object<span class="token punctuation">)</span><span class="token punctuation">{</span>    Object<span class="token punctuation">.</span><span class="token function">SetActive</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Available_Objects_Dictionary<span class="token punctuation">.</span><span class="token function">ContainsKey</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Available_Objects_Dictionary<span class="token punctuation">[</span>Object<span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Enqueue</span><span class="token punctuation">(</span>Object<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        Available_Objects_Dictionary<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Queue<span class="token punctuation">&lt;</span>GameObject<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Available_Objects_Dictionary<span class="token punctuation">[</span>Object<span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Enqueue</span><span class="token punctuation">(</span>Object<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><code>ReturnPool</code> will put the object into the corresponding pool,if the pool does not exist, it will create one first.</p></li><li><h2 id="getpool">GetPool</h2><p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token return-type class-name">GameObject</span> <span class="token function">GetPool</span><span class="token punctuation">(</span><span class="token class-name">GameObject</span> Object<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name"><span class="token keyword">var</span></span> NAME <span class="token operator">=</span> Object<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"(Clone)"</span><span class="token punctuation">;</span> <span class="token comment">//Because Unity will add "(Clone)" in the end of the instantiated prefabs</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Available_Objects_Dictionary<span class="token punctuation">[</span>NAME<span class="token punctuation">]</span><span class="token punctuation">.</span>Count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">FillPool</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name"><span class="token keyword">var</span></span> obj <span class="token operator">=</span> Available_Objects_Dictionary<span class="token punctuation">[</span>NAME<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    obj<span class="token punctuation">.</span><span class="token function">SetActive</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> obj<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><code>GetPool</code> will be sure you can get a object from the pool.When there are no object in the pool, it will fill one into thepool.</p></li></ul><h1 id="improvment">Improvment</h1><p>Now, we have the fundamental ObjectPool instance, we can use it toreuse our objects already created in scene. But it still have somethingcan be improved, the most obvious one is the <code>FillPool</code>method.</p><p>When invoke the <code>FillPool</code> method, it will fill the poolwith a <code>Size</code> number of objects. It looks right when ourobjects needed all in a controllable small range of quantities. But whenwe need to use a large number of one type objects a short time, theother objects created as foils are wasted.</p><p>To solve this problem, we only need to add a <code>Prefabs</code>parameter to the <code>FillPool</code> method in order to designate whatprefabs need to be fill into the pool.</p><p>The improved <code>FillPool</code> method will be looked like asthis<br><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">FillPool</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> Size<span class="token punctuation">,</span> <span class="token class-name">List<span class="token punctuation">&lt;</span>GameObject<span class="token punctuation">&gt;</span></span> Prefabs<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> Prefab <span class="token keyword">in</span> Prefabs<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name"><span class="token keyword">var</span></span> obj <span class="token operator">=</span> <span class="token function">instantiate</span><span class="token punctuation">(</span>Prefab<span class="token punctuation">,</span> transform<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">ReturnPool</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>and the <code>GetPool</code> method need to be improved like this<br><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token return-type class-name">GameObject</span> <span class="token function">GetPool</span><span class="token punctuation">(</span><span class="token class-name">GameObject</span> Object<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name"><span class="token keyword">var</span></span> NAME <span class="token operator">=</span> Object<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"(Clone)"</span><span class="token punctuation">;</span> <span class="token comment">//Because Unity will add "(Clone)" in the end of the instantiated prefabs</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Available_Objects_Dictionary<span class="token punctuation">[</span>NAME<span class="token punctuation">]</span><span class="token punctuation">.</span>Count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">FillPool</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>GameObject<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>Object<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name"><span class="token keyword">var</span></span> obj <span class="token operator">=</span> Available_Objects_Dictionary<span class="token punctuation">[</span>NAME<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    obj<span class="token punctuation">.</span><span class="token function">SetActive</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> obj<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>meanwhile, the <code>Awake</code> also need to be improved likethis<br><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Instance <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> Instance <span class="token operator">!=</span> <span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">Destroy</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        Instance <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token function">FillPool</span><span class="token punctuation">(</span>Pool_Size<span class="token punctuation">,</span> Prefabs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><p>Now, when we use the <code>GetPool</code> to get a object from pool,it will only create one object in the pool when this type of object isempty in the pool.</p><h1 id="conclusion">Conclusion</h1><p>We have implement a ObjectPool in the steps above. The pool can storeand release the GameObject, and we can use this to save memory in thebullet script or other same function scropt. But this class also havesome inconvenience, that is we can only use it as a GameObject pool, ifwe want to store another type, we need to create another class ofobject. About how to solve it to make the ObjectPool generalization, itis your thinking homework. I may put the method in another post.</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;introduce&quot;&gt;Introduce&lt;/h1&gt;
&lt;p&gt;In our recent game production experience, we often faced the problem
of excessive memory consumption.&lt;br&gt;
For example, when pressed Shift kay, the player can get a high speed,
and some shadow will appear in the path. If we instantiate and destory
the shadow object every time, the memory will be greatly wasted. So, we
need to use &lt;code&gt;ObjectPool&lt;/code&gt; to deal with this situation.&lt;br&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="EnglishBlog" scheme="http://iiishop.github.io/categories/EnglishBlog/"/>
    
    <category term="Design Pattern" scheme="http://iiishop.github.io/categories/EnglishBlog/Design-Pattern/"/>
    
    
    <category term="Unity" scheme="http://iiishop.github.io/tags/Unity/"/>
    
    <category term="Design Pattern" scheme="http://iiishop.github.io/tags/Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>心灵迷宫_框架</title>
    <link href="http://iiishop.github.io/2023/02/02/%E5%BF%83%E7%81%B5%E8%BF%B7%E5%AE%AB-%E6%A1%86%E6%9E%B6/"/>
    <id>http://iiishop.github.io/2023/02/02/%E5%BF%83%E7%81%B5%E8%BF%B7%E5%AE%AB-%E6%A1%86%E6%9E%B6/</id>
    <published>2023-02-02T08:12:54.000Z</published>
    <updated>2023-04-25T13:32:26.325Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言">引言</h1><p>此项目设计是基于项目组成员<strong>程禹</strong>的提议，外加我个人的思路衍生而形成。此篇文章将会介绍游戏涉及到的功能框架。</p><span id="more"></span><h1 id="框架">框架</h1><pre class="mermaid">flowchart TBsubgraph 0 [游离于场景之外的功能]    direction LR    存档---保存    存档---12    subgraph 01 [背包]        人物装备        主武器和副武器        04        02        011[后续有待添加]    end    subgraph 02 [各项属性]        血量        行走速度        攻击速度        021[后续有待添加]    end    subgraph 03 [特殊技能]        钩爪        时间停止        031[后续有待添加]    end    subgraph 04 [道具]        041(主动道具)        042(被动道具)    endend1[开始界面]subgraph 2 [教学关 //DEMO的终点]    direction LR    subgraph 21 [移动教学]        211([ad移动])---        212([space跳跃])    end    21==&gt;22    subgraph 22 [武器教学]        direction TB        221([左键向鼠标位置开火])---        222([右键特殊攻击 //远程武器一般为枪柄近战])    end    22==&gt;23    subgraph 23 [道具教学]        direction TB        231([道具的装备])---        232([滚轮切换主动道具])---        233([R使用主动道具])---        234([被动道具的装备 //以二段跳为例])---        235([使用二段跳通过常规无法通过的地形])        234-.-212    end    23==&gt;24    subgraph 24 [特殊技能教学]        direction TB        241([特殊技能的使用 //以钩爪为例])---        242([使用钩爪通过常规无法通过的地形])---        243([将钩爪用作为攻击手段 //拉近敌人])    endendsubgraph 3 [诊所所在的街道]    direction LR    4    5    6endsubgraph 4 [诊所]    direction LR    41([接取委托的办公桌])---    411[每次委托结束后会刷新出现四个新的委托]    41---412    subgraph 412 [委托检查机制]        当前玩家等级        玩家最近游玩类型频率        是否达到剧情触发条件    end    42([升级的场所])    43([更换武器装备以及道具的场所])endsubgraph 5 [购买武器和道具的场所]    购买武器    购买道具    subgraph 51[改装武器 //后续更新内容]        direction LR        枪管        瞄具        弹匣        枪托        511[其他配件 //例如镭射指示]        //后续也可考虑加入诸如流血/中毒等特殊效果    endendsubgraph 6 [购买装备和服装的场所]    61[购买装备]---装备大多拥有高防御与高属性加成但样式制式且无特殊效果    62[购买服装 //后续与特殊效果一同更新]---621[服装大多防御力低下且少有属性加成但样式随意切多有特殊效果 //看起来比较二次元]end1--&gt;11(新游戏)1--&gt;12(载入游戏)1--&gt;13(设置)1--&gt;退出11--&gt;2124==&gt;402-.-42人物装备-.-43主武器和副武器-.-4304-.-43</pre><h1 id="流程外的内容">流程外的内容</h1><ol type="1"><li><p>游戏整体的推进方式依照剧情而定，例如：</p><ol type="1"><li><code>等级推进</code>在玩家到达某指定等级后便会强制进入剧情</li><li><code>时间推进</code>游戏内时间是有一定流逝速度的，无论玩家在做什么时间都会经过。而到达了某一特定时间，玩家便会强制进入剧情</li><li><code>事件推进</code>这种方法比较传统，需要和其他的进行组合。例如完成了某个npc的任务后，走到另外某处地方便会发生事件而进入剧情；达到了一定等级，当经过某处地方便会发生事件而进入剧情……</li></ol><p>依照剧情的进行方式，对框架进行更改而产生相应效果。</p></li><li><p>框架仍然较为粗略，需要进行更加细致的描述，例如：</p><ol type="1"><li>补全目前能想到的所有<code>特殊技能</code></li><li>补全目前能想到的所有<code>武器右键效果</code></li><li>补全目前能想到的所有<code>特殊效果</code></li><li><code>近战类</code>武器在此框架中未被描述，需要斟酌后再进行制作</li></ol></li><li><p>因为内容的关系，网页上浏览字体较小，请搭配放大使用。</p></li><li><p>由于时间限制，此次对于框架的描述并未搭配相关图例提示，若有未解之处请及时反馈。</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;引言&quot;&gt;引言&lt;/h1&gt;
&lt;p&gt;此项目设计是基于项目组成员&lt;strong&gt;程禹&lt;/strong&gt;的提议，外加我个人的思路衍生而形成。此篇文章将会介绍游戏涉及到的功能框架。&lt;/p&gt;</summary>
    
    
    
    <category term="中文推文" scheme="http://iiishop.github.io/categories/%E4%B8%AD%E6%96%87%E6%8E%A8%E6%96%87/"/>
    
    <category term="游戏企划" scheme="http://iiishop.github.io/categories/%E4%B8%AD%E6%96%87%E6%8E%A8%E6%96%87/%E6%B8%B8%E6%88%8F%E4%BC%81%E5%88%92/"/>
    
    <category term="唤心" scheme="http://iiishop.github.io/categories/%E4%B8%AD%E6%96%87%E6%8E%A8%E6%96%87/%E6%B8%B8%E6%88%8F%E4%BC%81%E5%88%92/%E5%94%A4%E5%BF%83/"/>
    
    
    <category term="DearDeer" scheme="http://iiishop.github.io/tags/DearDeer/"/>
    
    <category term="框架" scheme="http://iiishop.github.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="唤心" scheme="http://iiishop.github.io/tags/%E5%94%A4%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>KMP_algorithm</title>
    <link href="http://iiishop.github.io/2022/12/14/KMP-algorithm/"/>
    <id>http://iiishop.github.io/2022/12/14/KMP-algorithm/</id>
    <published>2022-12-14T15:53:49.000Z</published>
    <updated>2023-04-17T01:10:24.828Z</updated>
    
    <content type="html"><![CDATA[<h1 id="introduce">Introduce</h1><p><code>KMP</code> is a <em>String-matching</em> algorithm and one ofthe two <em>String-matching</em> algorithms I know.</p><p>The first is the <code>Brute-force algorithm (BF algorithm)</code>,and the <em>Time-complexity</em> is <strong><em>O(nm)</em></strong>.<em>'n'</em> is the length of the <strong>source String</strong>, and<em>'m'</em> is the length of the <strong>pattern String</strong>.</p><p>The second is <code>KMP</code>, and its <em>Time-complexity</em> is<strong><em>O(n)</em></strong>. Now, let's begin with why<code>KMP</code> was born.</p><span id="more"></span><h1 id="background">Background</h1><p>This section will discuss the <em>background</em> of <code>KMP</code>but not its <em>history</em>.</p><p>When we want to find the index of the <strong>pattern String</strong>in the <strong>source String</strong>, usually, we will check the<strong>source String</strong> one by one to find the start character ofthe <strong>pattern String</strong>, then check if the rest matches the<strong>pattern String</strong>. If it matches, returns the index. Ifnot, then return from the start.</p><p>We can see this function is a time waste, especially in the length ofthe <strong>pattern String</strong> is a large number. Because afterevery failure, the work of matching pattern String will be restarted.So, <code>KMP</code> uses a way to avoid this condition.</p><p>Now, I will use a simple example to show you how KMP works.</p><p>the <strong>source String</strong> is <code>"aaaaab"</code> and the<strong>pattern String</strong> is <code>"aaab"</code></p><p>So the <em>Next array</em> is <code>"0120"</code></p><p>We can easily know it will do <strong><em>6 loops</em></strong> butnot <strong><em>6 processes</em></strong>.</p><ol type="1"><li><table><thead><tr class="header"><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th></tr></thead><tbody><tr class="odd"><td>i</td><td></td><td></td><td></td><td></td><td></td></tr><tr class="even"><td>a</td><td>a</td><td>a</td><td>a</td><td>a</td><td>b</td></tr><tr class="odd"><td>a</td><td>a</td><td>a</td><td>b</td><td></td><td></td></tr></tbody></table><p><code>a == a</code></p></li><li><table><thead><tr class="header"><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th></tr></thead><tbody><tr class="odd"><td></td><td>i</td><td></td><td></td><td></td><td></td></tr><tr class="even"><td>a</td><td>a</td><td>a</td><td>a</td><td>a</td><td>b</td></tr><tr class="odd"><td>a</td><td>a</td><td>a</td><td>b</td><td></td><td></td></tr></tbody></table><p><code>a == a</code></p></li><li><table><thead><tr class="header"><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th></tr></thead><tbody><tr class="odd"><td></td><td></td><td>i</td><td></td><td></td><td></td></tr><tr class="even"><td>a</td><td>a</td><td>a</td><td>a</td><td>a</td><td>b</td></tr><tr class="odd"><td>a</td><td>a</td><td>a</td><td>b</td><td></td><td></td></tr></tbody></table><p><code>a == a</code></p></li><li><table><thead><tr class="header"><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th></tr></thead><tbody><tr class="odd"><td></td><td></td><td></td><td>i</td><td></td><td></td></tr><tr class="even"><td>a</td><td>a</td><td>a</td><td>a</td><td>a</td><td>b</td></tr><tr class="odd"><td>a</td><td>a</td><td>a</td><td>b</td><td></td><td></td></tr></tbody></table><p><code>a != b</code><br>So, this matching failed. Because of Next[2] = 2, the next processis:</p></li><li><table><thead><tr class="header"><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th></tr></thead><tbody><tr class="odd"><td></td><td></td><td></td><td>i</td><td></td><td></td></tr><tr class="even"><td>a</td><td>a</td><td>a</td><td>a</td><td>a</td><td>b</td></tr><tr class="odd"><td></td><td>a</td><td>a</td><td>a</td><td>b</td><td></td></tr></tbody></table><p><code>a == a</code></p></li><li><table><thead><tr class="header"><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th></tr></thead><tbody><tr class="odd"><td></td><td></td><td></td><td></td><td>i</td><td></td></tr><tr class="even"><td>a</td><td>a</td><td>a</td><td>a</td><td>a</td><td>b</td></tr><tr class="odd"><td></td><td>a</td><td>a</td><td>a</td><td>b</td><td></td></tr></tbody></table><p><code>a != b</code></p></li><li><table><thead><tr class="header"><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th></tr></thead><tbody><tr class="odd"><td></td><td></td><td></td><td></td><td>i</td><td></td></tr><tr class="even"><td>a</td><td>a</td><td>a</td><td>a</td><td>a</td><td>b</td></tr><tr class="odd"><td></td><td></td><td>a</td><td>a</td><td>a</td><td>b</td></tr></tbody></table><p><code>a == a</code></p></li><li><table><thead><tr class="header"><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th></tr></thead><tbody><tr class="odd"><td></td><td></td><td></td><td></td><td></td><td>i</td></tr><tr class="even"><td>a</td><td>a</td><td>a</td><td>a</td><td>a</td><td>b</td></tr><tr class="odd"><td></td><td></td><td>a</td><td>a</td><td>a</td><td>b</td></tr></tbody></table><p><code>b == b</code>, i is in the last place of the <strong>sourceString</strong> and 'b' is also the last character of the<strong>pattern String</strong>.</p></li></ol><p>So, the matching is complete, the index is 2.</p><h1 id="next-array">Next Array</h1><p>The most important part of <code>KMP</code> is the <em>Nextarray</em>.</p><p>The <em>Next array</em> shows how many elements can be<strong><em>skipped</em></strong> if the last matching fails in thisplace.</p><p>An example of the <em>Next array</em>:</p><table><thead><tr class="header"><th>A</th><th>B</th><th>A</th><th>C</th><th>A</th><th>B</th><th>A</th><th>B</th></tr></thead><tbody><tr class="odd"><td>0</td><td>0</td><td>1</td><td>0</td><td>1</td><td>2</td><td>3</td><td>2</td></tr></tbody></table><p>From this table, we can see the pattern String is<code>"ABACABAB"</code> and the <em>Next array</em> is<code>"00101232"</code>, now I will show the code to tell how togenerate the <em>Next array</em>.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token class-name">GetNext</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token class-name">Pattern</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> <span class="token class-name">Pattern_Length</span> <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token class-name">Next</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">Pattern_Length</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">Next</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token class-name">Pattern_Length</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>j <span class="token operator">=</span> <span class="token class-name">Next</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>j<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">Next</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token class-name">Next</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Let's simulate this process using "ABACABAB".</p><pre><code>Pattern_Lengh = 8</code></pre><p>So, it will do 7 loops.</p><ol type="1"><li><p>i = 1, j = 0<br><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Pattern</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'B'</span><span class="token punctuation">,</span> <span class="token class-name">Pattern</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'A'</span><span class="token class-name">Next</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p></li><li><p>i = 2, j = 0<br><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Pattern</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'A'</span><span class="token punctuation">,</span> <span class="token class-name">Pattern</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'A'</span>j<span class="token operator">++</span><span class="token class-name">Next</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p></li><li><p>i = 3, j = 1<br><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Pattern</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'C'</span><span class="token punctuation">,</span> <span class="token class-name">Pattern</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'B'</span>j <span class="token operator">=</span> <span class="token class-name">Next</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token class-name">Pattern</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'A'</span><span class="token class-name">Next</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></p></li><li><p>i = 4, j = 0<br><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Pattern</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'A'</span><span class="token punctuation">,</span> <span class="token class-name">Pattern</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'A'</span>j<span class="token operator">++</span><span class="token class-name">Next</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p></li><li><p>i = 5, j = 1<br><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Pattern</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'B'</span><span class="token punctuation">,</span> <span class="token class-name">Pattern</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'B'</span>j<span class="token operator">++</span><span class="token class-name">Next</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p></li><li><p>i = 6, j = 2<br><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Pattern</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'A'</span><span class="token punctuation">,</span> <span class="token class-name">Pattern</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'A'</span>j<span class="token operator">++</span><span class="token class-name">Next</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p></li><li><p>i = 7, j = 3<br><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Pattern</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'B'</span><span class="token punctuation">,</span> <span class="token class-name">Pattern</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'C'</span>j <span class="token operator">=</span> <span class="token class-name">Next</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token class-name">Pattern</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'B'</span>j<span class="token operator">++</span><span class="token class-name">Next</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></li></ol><p>In every loop, the code will generate a Next number. Now I will tellyou why it can.</p><p>In this code, we can easily know <code>j</code> is a pointer to theprefix. When the current part of the string and the prefix are the same,<code>j</code> will self-increasing to point to the next character. Butwhen the current character is not as same as the<code>Pattern[j]</code>, <code>j</code> will return to the skippedcharacter pointed to by the previous character, let's see it by anexample.</p><p><code>i = 7, j = 3</code></p><table><thead><tr class="header"><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th></tr></thead><tbody><tr class="odd"><td></td><td></td><td></td><td>j</td><td></td><td></td><td></td><td></td></tr><tr class="even"><td>A</td><td>B</td><td>A</td><td>C</td><td>A</td><td>B</td><td>A</td><td>B</td></tr><tr class="odd"><td>0</td><td>0</td><td>1</td><td>0</td><td>1</td><td>2</td><td>3</td><td>x</td></tr></tbody></table><p>Because <code>Pattern[i] != Pattern[j] and j &gt; 0</code>, so, weneed to find the skip number from the last character in the prefix.</p><p><code>j = Next[j - 1] = Next[2] = 1</code></p><table><thead><tr class="header"><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th></tr></thead><tbody><tr class="odd"><td></td><td>j</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr class="even"><td>A</td><td>B</td><td>A</td><td>C</td><td>A</td><td>B</td><td>A</td><td>B</td></tr><tr class="odd"><td>0</td><td>0</td><td>1</td><td>0</td><td>1</td><td>2</td><td>3</td><td>x</td></tr></tbody></table><p>It is because we treat the <code>Pattern[i - 1] and Puttern[i]</code>as a whole, and <code>Pattern[i - 1]</code> corresponds to <strong>thethird character</strong> in the prefix, then we see <strong>the thirdcharacter</strong> in the prefix to be the current character, so, itcorresponds to <strong>the first character</strong> in the prefix, thus,we need to check if <strong>the second character</strong> in the prefixmatching <code>Pattern[i]</code>.</p><p>Because of <code>Pattern[1] == Pattern[i]</code> thus, <em>j++</em>,it means we can skip 2 characters if the last matching failed in thenext place (although it is unlikely to be achieved).</p><p>Now, we found out how to generate the <em>Next array</em>, the next,I will show you how to use the <em>Next array</em> in the<em>String-matching</em> algorithm</p><h1 id="kmp">KMP</h1><p>I will show the code first.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">KMP</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token class-name">Source</span><span class="token punctuation">,</span> <span class="token class-name">String</span> <span class="token class-name">Pattern</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token class-name">Next</span> <span class="token operator">=</span> <span class="token class-name">GetNext</span><span class="token punctuation">(</span><span class="token class-name">Pattern</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">Source</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token class-name">Source</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>j <span class="token operator">=</span> next<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">Source</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>j<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> i <span class="token operator">-</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>We can see some of this code is as same as the code in the function<code>GetNext</code> and it also does the same thing. So, we can see the<code>GetNext</code> function is a process to match strings within the<strong>pattern String</strong>.</p><p>Skip them, the last part <code>j == Pattern_Length</code> means jpoints over the <strong>pattern String</strong>, so the matching iscomplete.</p><h1 id="conclusion">Conclusion</h1><p>The <code>KMP</code> algorithm reduced the <em>Time-complexity</em>of the <code>B_F String-matching algorithm</code>. The most importantpart of <code>KMP</code> is solving the <strong>Next array</strong>,this step is an expression of <strong><em>recursivethinking</em></strong>, we need to appreciate this idea and use it toimprove efficiency when thinking of algorithms to solve otherproblems.</p><h1 id="whole-code">Whole Code</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">KMP</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token class-name">Source</span><span class="token punctuation">,</span> <span class="token class-name">String</span> <span class="token class-name">Pattern</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> <span class="token class-name">Pattern_Length</span> <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token class-name">Next</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">Pattern_Length</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">Next</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token class-name">Pattern_Length</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>j <span class="token operator">=</span> <span class="token class-name">Next</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>j<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">Next</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">Source</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token class-name">Source</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>j <span class="token operator">=</span> next<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">Source</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>j<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token class-name">Pattern_Length</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> i <span class="token operator">-</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;introduce&quot;&gt;Introduce&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;KMP&lt;/code&gt; is a &lt;em&gt;String-matching&lt;/em&gt; algorithm and one of
the two &lt;em&gt;String-matching&lt;/em&gt; algorithms I know.&lt;/p&gt;
&lt;p&gt;The first is the &lt;code&gt;Brute-force algorithm (BF algorithm)&lt;/code&gt;,
and the &lt;em&gt;Time-complexity&lt;/em&gt; is &lt;strong&gt;&lt;em&gt;O(nm)&lt;/em&gt;&lt;/strong&gt;.
&lt;em&gt;&#39;n&#39;&lt;/em&gt; is the length of the &lt;strong&gt;source String&lt;/strong&gt;, and
&lt;em&gt;&#39;m&#39;&lt;/em&gt; is the length of the &lt;strong&gt;pattern String&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The second is &lt;code&gt;KMP&lt;/code&gt;, and its &lt;em&gt;Time-complexity&lt;/em&gt; is
&lt;strong&gt;&lt;em&gt;O(n)&lt;/em&gt;&lt;/strong&gt;. Now, let&#39;s begin with why
&lt;code&gt;KMP&lt;/code&gt; was born.&lt;/p&gt;</summary>
    
    
    
    <category term="EnglishBlog" scheme="http://iiishop.github.io/categories/EnglishBlog/"/>
    
    <category term="Algorithm" scheme="http://iiishop.github.io/categories/EnglishBlog/Algorithm/"/>
    
    
    <category term="Algorithm" scheme="http://iiishop.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>关于主线的想法</title>
    <link href="http://iiishop.github.io/2022/10/24/%E5%85%B3%E4%BA%8E%E4%B8%BB%E7%BA%BF%E7%9A%84%E6%83%B3%E6%B3%95/"/>
    <id>http://iiishop.github.io/2022/10/24/%E5%85%B3%E4%BA%8E%E4%B8%BB%E7%BA%BF%E7%9A%84%E6%83%B3%E6%B3%95/</id>
    <published>2022-10-24T07:37:39.000Z</published>
    <updated>2023-04-17T01:10:24.831Z</updated>
    
    <content type="html"><![CDATA[<h1 id="游戏的形式">游戏的形式</h1><ul><li><p>分为<code>回忆</code>和<code>现实</code>两个部分。<code>回忆</code>使用3d场景来表现，<code>现实</code>使用2d伪3d来表现。</p></li><li><p>主角骑着单车在城市中游历，遇到<code>回忆事件</code>后进入<code>回忆场景</code>，在游历中亦可与城市互动。</p></li></ul><span id="more"></span><ul><li><h2 id="时间系统">时间系统:</h2><ol type="1"><li><p>根据真实时间来映射游戏时间。现实一小时映射游戏三小时（游戏内从晚上九点到早上六点，控制实际时常在三小时左右）。随着时间的流逝，游戏中的<code>现实世界</code>也会跟着变化，一些事件的触发点也会跟着时间的变化而消失或产生。错过的事件不会在后续内容中再次发生。</p><p><code>目的</code>是希望游戏中的<code>现实</code>和<code>回忆</code>丰富程度相当，错过的<code>回忆内容</code>利用<code>现实内容</code>而填充。</p></li><li><p>根据游戏进度而进行时间的变化。当某些事件发生后，游戏的时间产生了推进。事件的发生时间会有重叠，从而达到分支和选择的目的，促进多周目游玩的需要。</p></li></ol></li></ul><h1 id="关于单车">关于单车</h1><ul><li><p>在我看来，<code>传统单车</code>有别于共享单车、公路车等年轻产物，是和现在的节奏是格格不入的。</p></li><li><p>现代诸事首要讲究的都是<code>效率</code>，而在吱呀声中缓缓驶来的<code>老单车</code>，则显得和效率二字毫无关联。现在的老单车，大多也只存在于老人的座下，在菜场和公园来回<code>转悠</code>。</p></li><li><p>因而，我认为，单车可以成为过去时代的一个代表，也是慢生活的一个<code>象征</code>。它可以起到一个<code>桥梁</code>的作用，链接现世与过去，从而被选中成为游戏的<code>线索物件</code>。</p></li><li><p>在游戏中，单车也类似一个<code>引路人</code>的存在，引导着主人公一点点找回过往的<code>碎片</code>，从而在心境上回到那最<code>原初的点</code>。</p></li><li><p>故事的<code>起因</code>是单车，故事的<code>经过</code>由单车的变化来表现，而故事的<code>结尾</code>也是与单车的挥别，从而迈向一个<code>新的起点</code>。</p></li></ul><h1 id="十年前的时代">十年前的时代</h1><ul><li><p>游戏中十年前的时代是一个存在于<code>虚构中的时代</code>。它是一个<code>感觉的集合体</code>。</p></li><li><p>十年前的主角还是年幼，那时候的他对于世界的认知也是做不到全面。那么以当时主人公那<code>稚嫩的视角</code>来观察与感受的世界，就是所谓十年前的时代。</p></li><li><p>或许是真的，也或许只是因为那时的主人公无牵无挂无欲无求，从而认为世界不需要快。他拥有充足的时间来细细体悟世界的每一处细节，因此产生了慢生活的感觉。</p></li><li><p>说点个人的。在我的眼中，那个时代是还被杀马特、火星文占据着主流文化的，手机等科技产品是包含<code>蓬勃生命力</code>的，流行音乐是被周杰伦、许嵩、徐良等占据着的，是个<code>有梦就可以去追</code>的时代；那时的群众还是<code>朴实</code>的，也没有那么多牛鬼蛇神充斥在生活中，归结起来是个<code>浪漫</code>的时代。当然这些看法非常的主观，出现这些想法可能真的是十年前的体悟，也可能只是现在对于过去的美好向往而强加产生的。总之我希望那个时代会成为一个<code>精神寄托</code>，成为一个<code>理想乡</code>一般的存在。在感到人生无望的时候，能有一些老物件、过往记录，来传递当时<code>对未来的寄托</code>以及提供一个<code>美好的幻想</code>留存于心中。</p></li><li><p>由此，在故事中这个时代是<code>饱含着希望与美好的</code>，是<code>浪漫而令人向往的</code>一个时代。主人公在回忆的最后，寻回了这份精神，从而一改从前，坚定了对<code>梦想</code>的追寻。</p></li></ul><h1 id="感觉的传递">感觉的传递</h1><ul><li><p>就我这些年对于游戏的研究来看，我认为游戏的本质是一个<code>感觉的媒介</code>。</p></li><li><p>这里的感觉是广义的。感觉可以是如喜怒哀乐之类的已经被定义的，叫的出名字的情感；也可以是伴随着事件的发生而产生，习以为常但又无法道出的感受；也会是那些在脑中飘忽着，忽然在某一时刻触动了心神的思绪。</p></li><li><p>在日常生活中，通过五感接收而来的体验最终化为感觉而导向脑中，形成回忆。因而，也可以说回忆是感觉的集合体。回忆也是由一些客观的体验加上主观的思考而构成的，因此，回忆不一定是真正的过去。</p></li><li><p>而越远的回忆越为飘渺，十年前的回忆，作为客观存在的，充满细节的那一部分大多已经烟消云散了，留下的多为是主观的感觉。故我想在这里，找寻一个拥有共性的感觉，来让这一代人认同他就是那个时代的一个代表。</p></li><li><p>说回游戏，游戏作为当前媒介的集大成者，包含着视听演绎，也提供了主动。在一款好的游戏作品中，设定出现的感觉却会让玩家产生是自己的经验总结而形成的，游戏在每一个细节中，潜移默化地将制作人所希望的感觉传递给了玩家，只要这是一个良性的感觉，那么作品自然不会不佳。</p></li><li><p>也因此，一名优秀的游戏制作人，能够很自然的在游戏的各处，添加他所体悟的感觉。换句话说，当制作人在游戏的这一处产生了这样的感觉，那么玩家同样也会产生。</p></li><li><p>当游戏结束后，尤其是在结束后许久，曾经作为游戏的体验就被剥离开来，留下的只剩在游戏中产生的感觉。</p></li></ul><pre class="line-numbers language-none"><code class="language-none">结合上面所说的，在我的脑中一直萦绕着一个感觉，它同时伴生着一个场景——一个朦胧的昏黄的画面，可能是午后，也可能是黄昏，一条空旷的大街，一家老旧的体育馆，门口站着几个看不清脸的学生，几栋瓷砖贴外墙，金属外框防盗窗的居民楼，和几栋淡彩色外墙，深蓝色反光窗户的说不清功能的楼房。我无法描述出具体的感觉，但能大致讲述出产生这种感觉的一些客观物件。可惜我对这些物件的了解研究也不是很精确，可能无法让这种感觉同样出现在他人的脑中。在这里说出大概也只是为了排解下我多年的困扰。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="主线的内容">主线的内容</h1><p>曾经在脑中浮现出的一些场景和内容，<code>仅供参考</code>。</p><ol type="1"><li><p>主人公在开始是一个麻木的社畜，每日重复着单调而统一的生活。他并未感觉此有什么不妥，也不想改变什么，认为日复一日的劳碌就是他此生的命了。</p></li><li><p>时间推进到深夜，主人公听到空竹筒清脆的敲击声——是一位推着车卖馄饨的老阿姨。而她也是主人公记忆中小时候就已经在卖馄饨，通过交谈，主人公好似领悟了什么。</p></li><li><p>主人公驱车前往海边时，同时也是黎明前最后的黑暗。经过前景的一个电线杆遮挡切换，朝阳在背景升起。镜头拉远，一群海鸥飞过。主人公来到了海边的悬崖上，看着巨浪拍击峭壁，心中汹涌澎湃。因为主人公的一夜未归而有人来寻他（父母、女友或者室友），当听到那人的喊声，主人公回头，自行车从被回忆勾画的形象变回老旧的形象，随后散架······</p></li></ol><pre class="line-numbers language-none"><code class="language-none">对主线的内容我目前还是到不清说不明，是有一种朦胧的感觉指引着我去完成这部作品。希望能在制作过程中逐渐探寻这感觉来由何处，或许也能完成我人生的蜕变。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;游戏的形式&quot;&gt;游戏的形式&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;分为&lt;code&gt;回忆&lt;/code&gt;和&lt;code&gt;现实&lt;/code&gt;两个部分。&lt;code&gt;回忆&lt;/code&gt;使用3d场景来表现，&lt;code&gt;现实&lt;/code&gt;使用2d伪3d来表现。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;主角骑着单车在城市中游历，遇到&lt;code&gt;回忆事件&lt;/code&gt;后进入&lt;code&gt;回忆场景&lt;/code&gt;，在游历中亦可与城市互动。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="中文推文" scheme="http://iiishop.github.io/categories/%E4%B8%AD%E6%96%87%E6%8E%A8%E6%96%87/"/>
    
    <category term="游戏企划" scheme="http://iiishop.github.io/categories/%E4%B8%AD%E6%96%87%E6%8E%A8%E6%96%87/%E6%B8%B8%E6%88%8F%E4%BC%81%E5%88%92/"/>
    
    <category term="单车" scheme="http://iiishop.github.io/categories/%E4%B8%AD%E6%96%87%E6%8E%A8%E6%96%87/%E6%B8%B8%E6%88%8F%E4%BC%81%E5%88%92/%E5%8D%95%E8%BD%A6/"/>
    
    
    <category term="DearDeer" scheme="http://iiishop.github.io/tags/DearDeer/"/>
    
    <category term="单车" scheme="http://iiishop.github.io/tags/%E5%8D%95%E8%BD%A6/"/>
    
  </entry>
  
  <entry>
    <title>游戏设计中的团队合作</title>
    <link href="http://iiishop.github.io/2022/10/06/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1%E4%B8%AD%E7%9A%84%E5%9B%A2%E9%98%9F%E5%90%88%E4%BD%9C/"/>
    <id>http://iiishop.github.io/2022/10/06/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1%E4%B8%AD%E7%9A%84%E5%9B%A2%E9%98%9F%E5%90%88%E4%BD%9C/</id>
    <published>2022-10-06T05:15:57.000Z</published>
    <updated>2023-04-17T01:10:24.833Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>此篇推文是关于<code>游戏设计艺术</code>一书中有关团队合作内容的笔记整理，以及这么一段时间来，我自己主持游戏制作团队的经验，相互结合形成的。</p><p>在高中时期，我曾花费一年粗略地翻阅了此书。现今，我会重新整理此前在此书中记录的零散笔记，并总结成推文发布。</p><h1 id="团队合作的必要性">团队合作的必要性</h1><p>现代的电子游戏，涉及到的方面越来越多，游戏设计师很难再单凭靠一腔热情完成一款成功的游戏作品，这时候，团队和团队合作的意义就出现了。</p><span id="more"></span><h1 id="成功团队的秘诀">成功团队的秘诀</h1><p>要成就一个成功的团队，最核心也是最严肃的一个关键点是<code>爱</code></p><p>当然这并不是说只要整个团队表现的一派和谐、其乐融融就能做成一款好的游戏(虽然这也没有坏处)。</p><p>这里说的爱，是团队成员需要对他们的作品拥有爱。<code>当团队中的每个人都对他们共同制作的游戏以及该游戏面向的玩家群体有很深的、很真切的爱，那么所有的不同与争论都会被搁置在一边。</code>因为他们想让正在设计制作的游戏变成现实，想让它尽可能完美地呈现在玩家面前。</p><p>类似的，<code>爱不足</code>会干扰团队，甚至影响他人，让游戏制作难以继续甚至停滞而散开。</p><h2 id="关于爱不足主要有下面三个主要问题">关于<code>爱不足</code>主要有下面三个主要问题</h2><ol type="1"><li><h3 id="团队成员不喜欢任何游戏">团队成员不喜欢任何游戏</h3><p>这对一个现在正充满热情扑向游戏设计制作的开发者来说可能很难理解，但这类人是确切存在的，或许是随波逐流，或许是利益导向，他们进入了游戏行业。但如果队伍中存在这样的成员，整个团队就像背上了重担，难行寸步。他们不会做出什么贡献，而把大部分时间精力浪费在与那些真正热爱游戏的成员的争论上，甚至连带影响那些成员也丧失热情。</p><p>应对这样的成员只有一种方法：<strong><em>请他们离开团队</em></strong></p></li><li><h3 id="团队成员比起当前设计的游戏更喜欢另一种设计模式的游戏">团队成员比起当前设计的游戏，更喜欢另一种设计模式的游戏</h3><p>这个问题在游戏团队中很是常见，比如：一名喜欢fps游戏的关卡策划，被迫去参与rpg游戏的开发；一名对画面有独到见解的技术美术，被迫去开发一款传奇类页游。这样的反差通常会让那些原有稳定的<code>爽点</code>的游戏开发者难以在新项目中找回那种感觉，从而消极怠工，难以展现出原有的技术和水平。</p><p>那么应对这样的成员，通常是需要主动沟通，引导他们去发现正在开发的游戏中吸引他们的部分，或者了解如何在当前正在开发的游戏中加入那些让他们感到舒适的新特性和新元素的想法。这些引导的最终结果，是让这款项目在那些成员眼中，从原先的痛恨厌恶，想划水而快速结束<code>变成</code>一款令他们热爱而活跃参与的项目。这不是一件简单的事情，团队管理者通常需要深入了解哪些部分能令这些开发者感到畅快而想要参与，并且在一次次沟通中潜移默化地将这种可能性表现出来，从而让成员的心态得到改变。</p><p>这里书中作者展现了这样一个例子</p><p><code>在作者曾参与开发的一款海盗游戏中，动画师们原先为那些激动人心的海盗角色设计了丰富的动作和面部动画，但随着设计的推进，他们发现游戏的主体是船，而那些海盗角色通常被置于离玩家很远的地方，那么任何细节的动画设计都是没有意义的。当动画师们意识到了这点，很明显地就失去了对项目的爱。而在后来的一次团队会议中，一位动画师带来了一些手稿，并表示：当意识到那些船才是明星时，他在思考如何才能让它们看起来很酷。于是，在那些手稿中出现了诸如：船如何被炸成碎片；桅杆如何断裂，并沉入大海；在船帆遭遇加农炮弹冲击时如何被撕裂···这些手稿给其他的动画师带来了启发和鼓舞，他们开始重新找回对项目的热爱，继续了项目的进行。</code></p><p>这里项目可以说是被这位动画师用这些手稿从失败的边缘抢救了回来，通过这些手稿的引导和启发，让那些动画师重新找到了热爱的点，并继续参与了制作。</p></li><li><h3 id="团队成员喜欢同一个游戏的不同版本">团队成员喜欢同一个游戏的不同版本</h3><p>这是在团队中最常见，最有普遍性的一个问题。这个时候，团队中每个成员都对当前开发的游戏非常热爱，但每个成员对这款游戏最终的导向都有着截然不同的看法，那么这种看法的不同势必会导致团队的分歧。</p><p>避免这种分歧的关键是：尽早让所有人都明确知道游戏的设计。</p><p>在游戏制作过程中难免会遇到争论和分歧，但如果每个人都能抱着同一个目标去讨论它，并且对他人的看法保持尊重，团队就能得到最终的结果。</p><p>一旦制作人在会议中感觉到有人不是真心同意某一想法，就必须停下工作，找寻让他们满意并继续合作的方法。否则他们就会慢慢失去对这个项目的热情，而失去对项目做有价值贡献的能力。<br>没有什么决定是<strong>最终决定</strong>，除非整个团队都同意它是<strong>最终决定</strong>。</p></li></ol><h2 id="实在无法感受对当前项目的热爱">实在无法感受对当前项目的热爱。</h2><p>若是实在无法对当前正在制作的游戏提起兴趣，那么你除了保持寻找能唤起热情的那个兴趣点，剩下的就只有——不把这款游戏看作为自己而制作的游戏，而把它看作为它所目标的玩家而设计的游戏。想象着曾经为所爱之人送出礼物时，看着他们见到礼物那一瞬间的兴奋，对于这一瞬间的期盼，可以使你焕发热情而去更加精心地寻找和准备礼物。这时候<code>爱</code>的目标点就转向了玩家身上。因为你爱着他们，所以当想象他们看到这款游戏的兴奋时，你自然就会焕发出激情，从而投入对游戏的制作中去。</p><p>可若是连受众的兴奋也不能成为你<code>爱</code>的理由时，那么就只有最后一个方法了——假装，假装你有大量的热情去对待你的游戏和受众。尽管这看起来像是在自欺欺人，但通常很有效果。并且在假装爱着的时候，真正的爱也会慢慢地涌现出来。</p><p><code>也许是一次春季大扫除，每个人都是很不情愿，想要敷衍了事。然而当其中一个人半开玩笑地说：“动起来，大伙，这肯定会很有意思。”每个人在听完这句讽刺的话后都轻笑出来了，随后装出一副“这肯定会很有意思”的态度开始干活。虽然一开始只是假装，但是没过多久，所有人就会觉得大扫除有意思起来。</code></p><p>如果不知道怎么去热爱一样东西，只需要问你自己那些真正热爱游戏的人会怎么做，然后开始做那些事情，你会吃惊的发现在你体内所发生的种种变化。</p><p>最后，<code>爱</code>是决定团队是否成功的最关键的因素，这是真心实意的。<code>爱</code>在团队中不是一件奢侈品，而是一件必需品——如果你希望制作出一款伟大的游戏的话。</p><h1 id="共同设计">共同设计</h1><p>当团队中每个人都<code>爱</code>这个项目时，那很棒，但同时，每个人都会想表达出自己的想法，把自己的设计呈现在游戏中。对于一些设计师来说，这很可怕，这破事他们不得不与其他人争论什么才是“正确”的游戏设计。这些设计师往往会不理于团队，无视其他人的意见，然后设计出一套完全独立于其他成员的设计。结果显而易见，其他组员的<code>爱</code>将会消失，而作品也将会失败。</p><p>一个更容易成功的方法是尽可能地多让团队成员参与到设计过程中去。把身为设计师的自尊放一边，很快你就会发现团队中大部分建议并不坏，他们也希望游戏能够变得更加优秀。</p><p>当所有人都参与到设计过程汇总，并每一个主意和建议都被认真听取时，那么将会得到</p><ul><li>有更多想法的选择空间</li><li>快速排除有缺陷的想法</li><li>被迫地全方位看待整体设计</li><li>让团队中每个成员都感到他们拥有游戏的设计</li></ul><p>当整个团队都参与到了设计之中，那么游戏会变得更加有力，每个人在完成自己的任务时也会更加有信心，一位他们理解游戏的设计。这点非常重要，因为他们能感知到不是所有的设计都是事先确定好的。</p><p>在游戏的制作过程中，无数的小决策一直在进行中——他们不是由设计师决定，而是由程序员、艺术家、执行官做出的。当每个人都对游戏设计有了完整的理解，这些小决策就会非常顺利地进行下去，并且增强整体的游戏设计，这使得整个项目拥有一种统一的紧密感和健全感。那么团队中的所有成员都会感觉到他们的贡献是游戏中最重要的部分——这是一种健康的情况。这意味着团队的成员都会感受到他们对于游戏的<strong>所有权</strong>和<strong>责任</strong></p><h1 id="团队交流">团队交流</h1><p><code>团队合作不是一种美德，而是一种选择</code><br>正如我们所知，团队合作在现代的游戏制作流程中是必不可少的。作为游戏设计师，我们需要团队。但不是所有人都是交际的天才，如何与团队进行高效的交流，如何良好地维护团队，这是我们都想知道却缺失的。下面我将罗列总结的十个要点来提供一些团队交流的建议。</p><ol type="1"><li><h2 id="客观">客观</h2><p>我们每个人都知道<code>客观</code>的问题陈述有多重要，但当我们处于讨论中时，我们总是希望自己的想法被采纳。在游戏的设计过程中，我们会涌现出很多很棒的点子，这使得我们会迫不及待地想在现实中看到它出现。在与团队的交流过程中，我们常常会把自己与自己的想法紧密地联系在一起。当其他的成员不喜欢这个想法的时候，我们会尝试据理力争而不愿放开。这种行为会导致整个团队交流变得十分低效，并且这些争论会消磨其他团队成员的参与愿望。</p><p>你可以尝试使用<code>第十四号透镜——"问题陈述"</code>来客观地审视自己的想法。</p><p>所有的团队交流都必须是着眼于如何用精心设计的想法来解决手边的问题。个人的喜好并不应该被提到台面--唯一要紧的只有这个想法能否解决问题。</p><p>在描述一个想法时，我们应该尽量地用客观态度去陈述。我们不应该用"我的想法"或者"XX的想法"来表示一个想法，而应该使用"有关XX的想法"。这么做的效果可以让想法与个人分离，也可以让想法更加清晰。</p><p>同时，在表示对其他团队成员的想法有异议时，我们不应该使用"A不好，我更喜欢B"的方式来表达，而应该使用"如果我们使用B来替代A，那么会产生怎样的效果"这样就会消除"A低一头，B高一头"的前提，把A和B两个想法置于同一个水平来分别讨论两个想法的优势和劣势。</p><p>当一场讨论中充满客观的氛围，那么每一个建议都会被充分地考虑。这也意味着即使是团队中最内向的成员也会勇于参与讨论，同时也会让很多可能被隐藏起来的想法浮出水面。</p></li><li><h2 id="清晰">清晰</h2><p>这个观点很简单，我们每个人也都明白--<code>只有客观的表述才容易被人接受</code>。不过，同样也有一些方法论可以被直接应用。</p><p>当你在解释自己的想法时，这个想法已经在你脑中盘旋许久，你已知悉它的一切。这时候你就需要注意你的表述，因为其他人对你的想法是一无所知。你的表述不能建立在你脑中的前提，你必须<strong>从头到尾，不遗漏任何一个细节，完完全全地</strong>讲述你的想法。</p><p>同样的，当你作为聆听者，如果听到其他人正在说一些你不明确的东西时，永远不要碍着面子，假装自己已经全部了解了。你需要不停地追问，直到你完全明白他的意思。(当然，没有技巧的提问确实会造成他人的反感。关于<a href="iiishop.github.io/2023/04/04/提问的智慧/">提问的智慧</a>，你可以点击前面的文字进入这篇博文学习。)</p><p>当你已经清晰的了解对方想做什么后，那么下一步就是追求细致和具体。例如，策划在会议中说出<code>"我会在周四之前完成战斗系统的文案。"</code>，这是一句足够清晰的话，你很清楚他想干什么，但是这仍不够具体，你不清楚到了周四他究竟会呈现一个什么样的效果。那么如果策划说的是<code>"我会在本周四，下午五点左右，在QQ平台向你提供一份文案。这篇文案是关于我们当前正在设计的回合制战斗系统的界面UI的描述，其中包括需要显示哪些数值、UI的几个大概设计方案、需要呈现哪些画面效果（例如跟随人物、线性减少等效果）。"</code>这样，你就能了解到许多细节，从而提前做好准备，并且也不会向不该努力的方向努力。</p></li><li><h2 id="持续">持续</h2><p><code>把所有东西都写下来</code></p><p>口头的会议交流是暂时性的——它很容易就被遗忘和误解。但记录下来的东西是持续的，在你感到迷茫而无所事事时可以时常翻看，从而找回自己应该干的事。</p><p>记录的工作应该时团队中的每一名成员都应该干的，并且在记录完成后，每位与会者都应该把记录上传到公共平台。这样如果自己记录的不够详细，可以有其他人的记录作为参照；同时你也可以清晰地了解到其他人对整场会议，尤其是对你想法的理解程度，这样可以方便你对下一次表述的改进，以及保证和其他与会者的工作顺利展开。</p></li><li><h2 id="舒适">舒适</h2><p>这一点可能听着有点蠢——舒适和交流有什么关系？不过在我以往的实践中，当处于舒适的环境中，人会变得不易分心，并且能更加自由地表达自己的想法。如果以后我们有条件了，团队交流应该被放在一个稳定且舒适的场所，里面很安静，温度适宜，并且有足够的椅子，也有一张宽敞的桌子足够让所有人有空间写点东西。另外会议应当被放在饭后，并且开会前不易过度劳累。</p><p><code>身心都感到舒适的与会者才会是一个优秀的与会者。</code></p></li><li><h2 id="尊重">尊重</h2><p>上一点着重说明的是身体上的<code>舒适</code>，而这点将会讨论如何让其他与会者感到心灵上的<code>舒适</code>。</p><p><code>成为一个优秀设计师的秘诀——成为优秀的聆听者。</code></p><p>聆听的秘诀就是<code>尊重</code>你聆听的那个人。</p><p>如果人们觉得他没有被<code>尊重</code>，那么他将不会说太多的话，并且即使在表达，也不会诚实地表达真实的感觉，因为他们害怕被指责或者出丑。</p><p>同时，当人们受到<code>尊重</code>时，他们会自由、公开且诚实地发言。</p><p>尊重他人是很简单的——只需要你无时无刻都用你自己愿意受到的待遇去对待别人。不要打断他们，或者思绪游离，即使你觉得他们说的东西非常的荒谬。你总是应该有礼貌而且有耐心，说一些令人愉快的话。</p><p>请记住，同生为人，并且同样一心参与这个项目开发，那么你与其他人的共同点肯定比不同点要多——寻找这些共同之处，因为尊重像我们自己一样的人是再容易不过的。</p><p>如果你在<code>尊重</code>的过程中失败了，你需要重复地默念这句话<code>"是不是因为我做错了什么？"</code>。如果你不知道是因为什么冒犯了他人，不要急于维护你自己刚刚说的话，而要立刻表示歉意，并且是带着真诚的。</p><p>如果你能够一直尊重你的队友，那么他们也会情不自禁地尊重你。当每一个人受到了尊重，团队会议的效率会被大大地提高。</p></li><li><h2 id="信任">信任</h2><p>要做到<code>尊重</code>，<code>信任</code>是必须的，当然反之亦然——如果我不相信你的所作所为，我怎么知道你是否尊重我。</p><p>但<code>信任</code>不是一蹴而就的，它是细水长流的，需要长时间培养的。因此，对于信任来说，交流的质量愿没有交流的数量重要。那些每天经常见面的人，经常交谈，经常共同处理问题，他们便会在长时间的接触中逐渐认识到他们之间有多少信任存在，也能意识到该信任到什么程度与什么时候是完全信任对方。</p><p>一组由互相完全不认识的组员组成的，并且一周甚至一个月都不会见一次面的制作组，组员之间会完全不清楚有多少信任存在。对于游戏制作这个需要大量信息交换的领域来说，光靠在网上的交流是完全不够的——根据面对面交流的微小差别，我们的潜意识会决定何以以及合适要去相信别人。</p><p>在一个团队中找出谁信任谁的最简单的方法就是——<code>观察哪些人经常一块吃饭</code>。大多数动物对于和谁一起进餐是非常挑剔的，人类也是如此。</p><p>我们需要去培养信任。最直接的方法就是提供给团队尽量多的会面机会以及交流机会，即使有些主题与项目没有任何关系（例如一块打游戏，或者出去旅游）。当团队成员获得了更多的高带宽交流（任何方向上的），那么他们就更有可能学会如何信任对方——这也是为什么大多数的游戏制作组都采用一个开放式会议室来进行团队游戏制作，这样成员就会经常性地不由自主地与其他人进行面对面的交流，从而产生信任。</p></li><li><h2 id="诚实">诚实</h2><p>如同舒适建立在尊重上一般，尊重建立在信任上，信任是建立在诚实上的。</p><p>如果你在某些方面发生了不诚实（例如夸大了工作成果或者是没有在规定时间内完成应做的任务，也有可能是与游戏开发无关的其他方面），其他的团队成员会害怕事情再次发生而拒绝与你坦诚交流，同时制作重心也很难再偏向你。这会妨碍团队交流，同时容易让团队变得死板且政治化——很多建立在团队默契上的事情现在需要用管理方式或者规章制度来安排。</p><p>你需要对你的团队做到诚实的表述，结合自身的实际情况来选择你的发言。<strong><em>永远不要为了迎合他人或者照顾自己的面子而做出不诚实的行为。</em></strong></p></li><li><h2 id="隐私">隐私</h2><p>当然，你可能是很想保住自己的诚实，但有时候真相真的很难说出口。不过，比起在公开场合说出那些伤人的真相，在一对一的私下交流中可能会更加容易说出口。因此<em>设计师需要尽可能地在每次会议结束后找时间与团队中的每一个人进行一对一的私下交流</em>，他们通常会陈述一些私密的想法，或者讨论一些私下的问题。这些一对一的交流对建立信任也很有帮助，它会建立一个良性循环：更多的信任带来更坦诚的交流，而更坦诚的交流有带来更多的信任，循环往复。</p></li><li><h2 id="团结">团结</h2><p>在游戏设计与制作的过程中，无法避免的会出现很多有关游戏设计的矛盾和争论。这些是自然且有益的。当然在最终，团队必须要做出一个所有人都同意的决定。</p><p>归根结底，争论都是由两个人产生的。如果团队中的某一名成员非常固执于某一点，设计师需要给他足够的尊重，并且与他共同处理这个问题，直到找到有意义的妥协方案。</p><p>让引发矛盾的成员解释他认为他所执着的这一点如此重要的原因，是一个让团队其他成员理解想法的一个重要方法。但如果这个方法不管用，设计师可以问一个极好的问题："我要怎么做你才会同意？"。你也许无法很快地平息这次争端，但你唯一不能做的事情就是忽视争端，冷处理他。这里有一个不错的短语来描述你现在需要保持的态度"原则上承诺，事实上反对"。</p><p>我们不总是能在最佳方案上达成一致，但我们必须在马上要做的事情上达成一致。团队成员需要抛弃个人的主观，而为了队伍的团结在他们不同意的路上走下去。如果团队成员不能做到团结，那么一切都会反映在游戏中。团队中只要有一名成员不赞同游戏的设计，就会拖住所有人的后腿，最终让团队归于冷寂。所有交流目的的前提就是要确保团队的团结。</p></li><li><h2 id="爱">爱</h2><p>爱。是的，我们又提到了爱。爱对于任何一个团队都十分重要，没有一款合格的游戏作品是在团队缺爱的情况下产生的。</p><p>爱是一条链条，它串联着<code>客观</code>、<code>清晰</code>、<code>持续</code>、<code>舒适</code>、<code>尊重</code>、<code>信任</code>、<code>诚实</code>、<code>隐私</code>以及<code>团结</code>。团队缺少其中的任意一点，爱就会被破坏。但如果团队拥有上述所说的所有东西，团队的爱就会展现其光辉，这时候，<strong><em>你除了制作出一款令人难以置信的佳作之外，不会有别的事情发生。</em></strong></p></li></ol><p>现在，团队正在进行着交流，而某人需要写一点文档——这会是下一篇笔记的主题。</p><h1 id="附录">附录</h1><ul><li><h2 id="透镜">透镜</h2><ul><li>第一百号透镜——"爱"</li><li>第一百零一号透镜——"团队"</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;
&lt;p&gt;此篇推文是关于&lt;code&gt;游戏设计艺术&lt;/code&gt;一书中有关团队合作内容的笔记整理，以及这么一段时间来，我自己主持游戏制作团队的经验，相互结合形成的。&lt;/p&gt;
&lt;p&gt;在高中时期，我曾花费一年粗略地翻阅了此书。现今，我会重新整理此前在此书中记录的零散笔记，并总结成推文发布。&lt;/p&gt;
&lt;h1 id=&quot;团队合作的必要性&quot;&gt;团队合作的必要性&lt;/h1&gt;
&lt;p&gt;现代的电子游戏，涉及到的方面越来越多，游戏设计师很难再单凭靠一腔热情完成一款成功的游戏作品，这时候，团队和团队合作的意义就出现了。&lt;/p&gt;</summary>
    
    
    
    <category term="中文推文" scheme="http://iiishop.github.io/categories/%E4%B8%AD%E6%96%87%E6%8E%A8%E6%96%87/"/>
    
    <category term="学习" scheme="http://iiishop.github.io/categories/%E4%B8%AD%E6%96%87%E6%8E%A8%E6%96%87/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="游戏设计" scheme="http://iiishop.github.io/categories/%E4%B8%AD%E6%96%87%E6%8E%A8%E6%96%87/%E5%AD%A6%E4%B9%A0/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="笔记" scheme="http://iiishop.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="游戏设计艺术" scheme="http://iiishop.github.io/tags/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1%E8%89%BA%E6%9C%AF/"/>
    
    <category term="团队合作" scheme="http://iiishop.github.io/tags/%E5%9B%A2%E9%98%9F%E5%90%88%E4%BD%9C/"/>
    
    <category term="游戏设计" scheme="http://iiishop.github.io/tags/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>游戏设计元素</title>
    <link href="http://iiishop.github.io/2022/10/06/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1%E5%85%83%E7%B4%A0/"/>
    <id>http://iiishop.github.io/2022/10/06/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1%E5%85%83%E7%B4%A0/</id>
    <published>2022-10-05T23:33:43.000Z</published>
    <updated>2023-04-17T01:10:24.833Z</updated>
    
    <content type="html"><![CDATA[<pre class="mermaid">flowchart TBA{体验}---B{玩家}A---兴趣曲线A---间接控制A---场景A---a[世界]a---故事a---美学a---空间a---角色B---玩家的脑---动机B---d((界面))---C{游戏}B---改变B---试玩---C试玩---DB---其他玩家---社群---BC---元素C---主题C---技术C---机制---谜题机制---平衡C---D{流程}---E{设计师}D---创意D---迭代E---团队---文档E---责任E---目标E---推销---客户---盈利E---客户E---盈利click 团队 "https://iiishop.github.io/2022/10/06/游戏设计中的团队合作/" _blank</pre><h1 id="可以通过点击进入相关推文页面">可以通过<code>点击</code>进入相关推文页面</h1><h1 id="游戏设计是一项涉及范围非常广的事务后面会不定期对每个涉及到的环节单独阐述">游戏设计是一项涉及范围非常广的事务，后面会不定期对每个涉及到的环节单独阐述。</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;pre class=&quot;mermaid&quot;&gt;flowchart TB
A{体验}---B{玩家}
A---兴趣曲线
A---间接控制
A---场景
A---a[世界]
a---故事
a---美学
a---空间
a---角色
B---玩家的脑---动机
B---d((界面))---C</summary>
      
    
    
    
    <category term="中文推文" scheme="http://iiishop.github.io/categories/%E4%B8%AD%E6%96%87%E6%8E%A8%E6%96%87/"/>
    
    
    <category term="游戏设计" scheme="http://iiishop.github.io/tags/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>对新项目的一些碎碎念</title>
    <link href="http://iiishop.github.io/2022/10/05/%E5%AF%B9%E6%96%B0%E9%A1%B9%E7%9B%AE%E7%9A%84%E4%B8%80%E4%BA%9B%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    <id>http://iiishop.github.io/2022/10/05/%E5%AF%B9%E6%96%B0%E9%A1%B9%E7%9B%AE%E7%9A%84%E4%B8%80%E4%BA%9B%E7%A2%8E%E7%A2%8E%E5%BF%B5/</id>
    <published>2022-10-04T21:52:20.000Z</published>
    <updated>2023-04-17T01:10:24.831Z</updated>
    
    <content type="html"><![CDATA[<h1 id="立项动机">立项动机</h1><p>因环境的变化，感觉周遭感知到的压力越来越大。记忆中少年时总是恬静而美好，但在如今，却又难以捉摸。</p><p>曾经带来回忆的地方大多以及不存在了。那些实体的药引消失后，能带来治愈的，也只剩下情感了。</p><span id="more"></span><p>曾无数次在梦中见到那些恍惚，如午后的阳光般迷迷朦朦，温暖，令人心安。此处没有令人心烦的催促，也没有令人压抑的人群，留下的只有憧憬和希望。但梦终究是梦，梦醒后，尽管尽力去追寻，却也再无法沉浸入那种感觉。</p><p>音乐是情感很好的载体，感受旋律时，初见的场面和美好会历历浮现在眼前，作为引子，将人拉入回忆。优秀的作曲家能将自己的情感带入音乐，令听者跨越时代而产生共情，或许这也是我钟情于老歌的缘由。</p><p>但音乐带来的即视感终究会是消散的，反复聆听的华丽也会落入尘俗，因而我想要的是能够持久留存的情感。</p><p>那么游戏就作为一个更完美的载体出现了。</p><p>游戏是一种集大成者的媒介，他跨越融合了声光影，且能让观者真实代入角色，达到共情的目的。因此，注意力便被转入此处，或许用一款游戏来重现那份美好，也是一种不错的选择。</p><h1 id="选择此题材的原因">选择此题材的原因</h1><p>这个想法的出现，也已经有三四年了。期间，也曾经有过一些尝试，但总觉得不妥而放弃。</p><p>目前这种形式也算是对游戏性和制作难度上的妥协。原先有过还原一整座2010时期的城市，供自由探索回味的想法，但是这种想法的实现难度太大，而且也不太符合现在的游戏市场。故放弃了开放，转型为线性流程。</p><p>单车可以说是慢节奏生活的一种代表。在游戏中，它是一条线索，贯穿着主人公的整个回忆，也是主人公的一种情感。在游戏中，它是一种载体，能够让玩家回味那个年代的感觉。</p><h1 id="项目的形式">项目的形式</h1><p>整体时常把握在一小时左右，将游戏活动范围缩小到四五个场景中，在游玩过程中，随着回忆的深入，能感受到场景随着时代在变化。</p><p>整个游戏的主题围绕着主人公的一种蜕变，通过这种回忆和体验唤醒了主人公内心深处沉睡的情感，从而让主人公重新找到自己的方向。</p><h1 id="一些建议">一些建议</h1><ol type="1"><li><p>在设计之初先确定故事发生的城市的规划，创作一张城市的俯瞰图，并且在关键的时间点做出城市内容的变化，方便后面设计的代入。</p></li><li><p>在设计游戏的时候，要考虑到玩家的游戏习惯，比如玩家喜欢在游戏中自由探索，那么就要在游戏中留出一些小范围的空间，让玩家自由探索，让玩家亲身体验游戏想传达的氛围，而不是一直被游戏的线索牵着走。</p></li></ol><h1 id="后记">后记</h1><p>这作也算是对我精神上的一种释放，希望能一切尽善尽美，顺利坐成。另外或许我的表达仍然不是那么得清晰，这种情感上的描述也是走向游戏制作人的一大难点，若感觉不大能理解意思，可以继续与我深入交流。</p><p>wish you all the best!</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;立项动机&quot;&gt;立项动机&lt;/h1&gt;
&lt;p&gt;因环境的变化，感觉周遭感知到的压力越来越大。记忆中少年时总是恬静而美好，但在如今，却又难以捉摸。&lt;/p&gt;
&lt;p&gt;曾经带来回忆的地方大多以及不存在了。那些实体的药引消失后，能带来治愈的，也只剩下情感了。&lt;/p&gt;</summary>
    
    
    
    <category term="中文推文" scheme="http://iiishop.github.io/categories/%E4%B8%AD%E6%96%87%E6%8E%A8%E6%96%87/"/>
    
    <category term="游戏企划" scheme="http://iiishop.github.io/categories/%E4%B8%AD%E6%96%87%E6%8E%A8%E6%96%87/%E6%B8%B8%E6%88%8F%E4%BC%81%E5%88%92/"/>
    
    <category term="单车" scheme="http://iiishop.github.io/categories/%E4%B8%AD%E6%96%87%E6%8E%A8%E6%96%87/%E6%B8%B8%E6%88%8F%E4%BC%81%E5%88%92/%E5%8D%95%E8%BD%A6/"/>
    
    
    <category term="DearDeer" scheme="http://iiishop.github.io/tags/DearDeer/"/>
    
    <category term="单车" scheme="http://iiishop.github.io/tags/%E5%8D%95%E8%BD%A6/"/>
    
  </entry>
  
  <entry>
    <title>DearDeer新企划</title>
    <link href="http://iiishop.github.io/2022/10/02/DearDeer%E6%96%B0%E4%BC%81%E5%88%92/"/>
    <id>http://iiishop.github.io/2022/10/02/DearDeer%E6%96%B0%E4%BC%81%E5%88%92/</id>
    <published>2022-10-01T22:26:29.000Z</published>
    <updated>2023-04-17T01:10:24.780Z</updated>
    
    <content type="html"><![CDATA[<h1 id="项目名称">项目名称</h1><p><code>单车</code></p><h1 id="简介">简介</h1><ul><li>社畜主人公在选择淘汰陪伴十年的单车的最后一晚，游历整个城市，将回忆和热情一步步找回的故事</li></ul><span id="more"></span><h1 id="概要">概要</h1><ul><li><h2 id="设计背景">设计背景</h2></li></ul><ol type="1"><li>十年的高速发展使得中国的面貌有了极大改观，它带来了社会生活质量的进步，但也带走了一些灵魂中的东西。</li><li>本项目通过将单车作为这种意识的象征，让其引领主人公在最后一次环行中逐步唤醒心中沉睡的<code>逐步丢失的灵魂</code>，得到身心上的回归和犀利。</li></ol><ul><li><h2 id="设计说明">设计说明</h2><ul><li><h3 id="美术设计">美术设计</h3><code>横版正交视角</code>，参考十三机兵防卫圈。<br>美术设计是此类氛围向游戏的灵魂，通过画面将玩家逐步带入主人公的故事，为玩家沉浸于故事提供了良好的基底。</li><li><h3 id="系统设计">系统设计</h3><pre class="mermaid">   graph TD;  A[人物系统]   B[背景系统]   C[其他系统]  A--&gt;D[人物动画控制]  D--&gt;骑行动画  D--&gt;移动动画  B--&gt;E[时间控制]  E--&gt;清晨  E--&gt;白天  E--&gt;午后  E--&gt;傍晚  E--&gt;夜晚  B--&gt;场景控制  C--&gt;对话系统  C--&gt;时间轴系统  A--&gt;人物时间段切换</pre></li><li><h3 id="剧情脚本设计">剧情脚本设计</h3>本作剧情设定为<code>一小时左右的小短片</code>，故大致为线性剧情，少有分支，但不影响结局。</li><li><strong><em>脚本设计说明</em></strong><ol type="1"><li>先使用<strong>流程图</strong>，将<em>关键的</em><code>时间/空间节点</code>进行串联，并标注每个节点的序号</li><li>再对每个<code>节点</code>展开，撰写具体的对话和动作内容</li></ol>例<code>(十三机兵防卫圈脚本设定集)</code>(加载时间略长，一般需要五分钟左右)：<br><img src="/2022/10/02/DearDeer%E6%96%B0%E4%BC%81%E5%88%92/十三机兵防卫圈剧情脚本.jpg" alt="十三机兵防卫圈剧情脚本.jpg"></li></ul></li></ul><h1 id="目标人员">目标人员</h1><ul><li><h2 id="程序-已足够"><del>程序</del> （已足够）</h2><ol type="1"><li>至少掌握一项面向对象语言</li><li>代码结构明确，文档清晰</li><li>掌握git以及plasticSCM的使用方法</li><li>了解Unity，能够熟练使用Unity则更佳</li><li>拥有较好的沟通能力</li><li>拥有较好的学习能力</li><li>及时反馈</li></ol></li><li><h2 id="美术">美术</h2><ul><li><h3 id="原画美术">原画美术</h3><ol type="1"><li>能够根据剧情以及人物设定，设计出符合氛围的原画作品</li><li>掌握git的使用方法</li><li>拥有较好的沟通能力</li><li>拥有较好的学习能力</li><li>及时反馈</li></ol></li><li><h3 id="d美术">2D美术</h3><ol type="1"><li>能够根据原画设定，绘制出对应的人物或场景物件</li><li>拥有良好的团队协调能力，保证团队画风一致</li><li>掌握git的使用方法</li><li>拥有较好的沟通能力</li><li>拥有较好的学习能力</li><li>及时反馈</li></ol></li><li><h3 id="技术美术">技术美术</h3><ol type="1"><li>能够熟练使用Unity完成Shader、后处理、光线效果、粒子效果等</li><li>代码结构明确，文档清晰</li><li>掌握git以及plasticSCM的使用方法</li><li>拥有较好的沟通能力</li><li>拥有较好的学习能力</li><li>及时反馈</li></ol></li></ul></li><li><h2 id="策划">策划</h2><ul><li><h3 id="文本剧情策划">文本剧情策划</h3><ol type="1"><li>能将剧情以类小说形式撰写</li><li>掌握markdown语言，会使用obsidian进行团队合作</li><li>拥有较好的沟通能力</li><li>拥有较好的学习能力</li><li>及时反馈</li></ol></li><li><h3 id="剧情脚本策划已足够"><del>剧情脚本策划</del>（已足够）</h3><ol type="1"><li>能够将文本剧情抽象成剧情脚本，并且清晰明确</li><li>掌握markdown语言，会使用obsidian进行团队合作</li><li>拥有较好的沟通能力</li><li>拥有较好的学习能力</li><li>及时反馈</li></ol></li><li><h3 id="程序脚本策划架构师">程序脚本策划(架构师)</h3><ol type="1"><li>至少掌握一门面向对象语言</li><li>能够使用多种设计模式进行程序脚本的设计</li><li>了解Unity的工作模式</li><li>掌握markdown语言，会使用obsidian进行团队合作</li><li>掌握Visio的使用方法</li><li>拥有较好的沟通能力</li><li>拥有较好的学习能力</li><li>及时反馈</li></ol></li></ul></li><li><h2 id="音效">音效</h2><ul><li><h3 id="氛围音效bgm">氛围音效(BGM)</h3><ol type="1"><li>拥有从剧情中抽象出氛围并作曲的能力</li><li>掌握git的使用方式</li><li>拥有较好的沟通能力</li><li>拥有较好的学习能力</li><li>及时反馈</li></ol></li><li><h3 id="应用音效">应用音效</h3><ol type="1"><li>拥有对各种细微声效的捕捉和采集能力</li><li>掌握git的使用方式</li><li>拥有较好的沟通能力</li><li>拥有较好的学习能力</li><li>及时反馈</li></ol></li></ul></li></ul><h1 id="开发环境">开发环境</h1><ol type="1"><li>Unity+PlasticSCM <em>开发</em></li><li>Git+GitHub <em>团队资源共享</em></li><li>QQ+飞书+可能会出现的团队合作集成软件 <em>交流</em></li><li>Obsidian+Zerotier <em>设计信息实时共享</em></li><li>Visio <em>流程架构设计</em></li></ol><h1 id="组织架构">组织架构</h1><pre class="mermaid">graph TD;A[制作人]---C[主美术]A---B[主程序]A---D[主策划]H[氛围音效]I[应用音效]D---F[程序脚本策划]---ID-----HD---剧情脚本策划D---文本剧情策划B---G[技术美术]B---应用程序师---IB---FC---2D美术C---原画美术C---GC---H</pre><h1 id="附录">附录</h1><p><a href="https://markdown.com.cn">markdown官方教程</a><br><a href="https://www.liaoxuefeng.com/wiki/896043488029600">廖雪峰git教程</a><br><a href="https://www.runoob.com/csharp/csharp-tutorial.html">RunoobC#教程</a><br><a href="https://learn.u3d.cn">Unity中文课堂</a></p><ul><li>时间表<br><pre class="mermaid">   gantt  title 简化时间图  dateFormat YYYY-MM-DD  axisFormat %m/%d  section 制作  企划书制作 :2022-09-30,3d  新人招收 :2022-10-02,10d  环境搭建及前期工作 :2022-10-01,14d  剧情撰写 :2022-10-05,30d  程序策划及实验 :a,2022-11-01,14d  制作 :b,after a,60d  测试 :after b,10d</pre>更新<br><pre class="mermaid">   gantt  title 现期时间图  dateFormat YYYY-MM-DD  axisFormat %m/%d  剧情撰写 :2022-11-10,40d  demo制作 :a,2022-11-01,50d  剧情逻辑抽象 :b,after a,4d  程序逻辑抽象 :c,after b,3d  制作(暂定) :after c,30d</pre></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;项目名称&quot;&gt;项目名称&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;单车&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&quot;简介&quot;&gt;简介&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;社畜主人公在选择淘汰陪伴十年的单车的最后一晚，游历整个城市，将回忆和热情一步步找回的故事&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="中文推文" scheme="http://iiishop.github.io/categories/%E4%B8%AD%E6%96%87%E6%8E%A8%E6%96%87/"/>
    
    <category term="游戏企划" scheme="http://iiishop.github.io/categories/%E4%B8%AD%E6%96%87%E6%8E%A8%E6%96%87/%E6%B8%B8%E6%88%8F%E4%BC%81%E5%88%92/"/>
    
    <category term="单车" scheme="http://iiishop.github.io/categories/%E4%B8%AD%E6%96%87%E6%8E%A8%E6%96%87/%E6%B8%B8%E6%88%8F%E4%BC%81%E5%88%92/%E5%8D%95%E8%BD%A6/"/>
    
    
    <category term="游戏企划" scheme="http://iiishop.github.io/tags/%E6%B8%B8%E6%88%8F%E4%BC%81%E5%88%92/"/>
    
    <category term="DearDeer" scheme="http://iiishop.github.io/tags/DearDeer/"/>
    
    <category term="单车" scheme="http://iiishop.github.io/tags/%E5%8D%95%E8%BD%A6/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://iiishop.github.io/2018/09/20/hello-world/"/>
    <id>http://iiishop.github.io/2018/09/20/hello-world/</id>
    <published>2018-09-20T04:23:35.000Z</published>
    <updated>2023-04-17T01:10:24.829Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your veryfirst post. Check <a href="https://hexo.io/docs/">documentation</a> formore info. If you get any problems when using Hexo, you can find theanswer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> oryou can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="quick-start">Quick Start</h2><h3 id="create-a-new-post">Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server">Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files">Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites">Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very
first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for
more info. If you get any problems when using Hexo, you can find the
answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or
you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;</summary>
    
    
    
    <category term="EnglishBlog" scheme="http://iiishop.github.io/categories/EnglishBlog/"/>
    
    
    <category term="Helloworld" scheme="http://iiishop.github.io/tags/Helloworld/"/>
    
    <category term="Test" scheme="http://iiishop.github.io/tags/Test/"/>
    
  </entry>
  
</feed>
